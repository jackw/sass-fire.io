{"componentChunkName":"component---src-templates-documentation-js","path":"/documentation/v1.2.0","webpackCompilationHash":"2973bb28ffa21d21f443","result":{"data":{"sassfireJson":{"sass_fire":[{"file":{"name":"_add.scss","path":"_add.scss"},"group":["math"],"context":{"name":"add","code":"\n    @return $a + $b;\n","type":"function"},"description":"Adds two values.\n\n","example":[{"code":"$add-numbers: add(10, 20);\n@debug $add-numbers; //=> 30","type":"scss","description":"add"}],"access":"public","parameter":[{"name":"a","type":"Number","description":null},{"name":"b","type":"Number","description":null}],"see":null,"usedBy":[{"context":{"name":"inc","type":"function"}}]},{"file":{"name":"_assoc.scss","path":"_assoc.scss"},"group":["object"],"context":{"name":"assoc","code":"\n    @return map-merge($obj, (#{$prop}: $val));\n","type":"function"},"description":"Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value.\n\n","example":[{"code":"$obj: (\n    a: 1,\n    b: 2\n);\n$set-prop: assoc('c', 3, $obj);\n@debug $set-prop; //=> ( a: 1, b: 2, c: 3)","type":"scss","description":"assoc"}],"access":"public","parameter":[{"name":"prop","type":"String","description":"The property name to set"},{"name":"val","type":"*","description":"The new value"},{"name":"obj","type":"Object","description":"The object to clone"}],"see":[{"context":{"name":"dissoc","type":"function"}},{"context":{"name":"pick","type":"function"}}],"usedBy":null},{"file":{"name":"_compose.scss","path":"_compose.scss"},"group":["function"],"context":{"name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","type":"function"},"description":"Performs right-to-left function composition. The right most parameter is the input\n\n","example":[{"code":"$input: ('a', 'b', 'c');\n$output: compose(\n  (implode, '-'),\n  (join, ('d', 'e')),\n  $input);\n@debug $output; //=> 'd-e-a-b-c'","type":"scss","description":"compose"}],"access":"public","parameter":[{"name":"params...","type":"Function...","description":"The functions and input to compose"}],"see":[{"context":{"name":"pipe","type":"function"}}],"usedBy":[{"context":{"name":"intersection","type":"function"}}]},{"file":{"name":"_concat.scss","path":"_concat.scss"},"group":["list"],"context":{"name":"concat","code":"\n    @if type-of($a) == 'list' and type-of($b) == 'list' {\n        @return join($a, $b);\n    }\n    @if type-of($a) == 'string' and type-of($b) == 'string' {\n        @return #{$a}#{$b};\n    }\n","type":"function"},"description":"Returns the result of concatenating the given lists or strings.\n\n","example":[{"code":"$concat-arrays: concat([1, 2, 3], [4, 5, 6]);\n@debug $concat-arrays //=> [1, 2, 3, 4, 5, 6]","type":"scss","description":"concat-arrays"},{"code":"$concat-strings: concat('ABC', 'DEF');\n@debug $concat-strings; //=> 'ABCDEF'","type":"scss","description":"concat-strings"}],"access":"public","parameter":[{"name":"a","type":"Array|String","description":"The first list"},{"name":"b","type":"Array|String","description":"The second list"}],"see":null,"usedBy":null},{"file":{"name":"_dec.scss","path":"_dec.scss"},"group":["math"],"context":{"name":"dec","code":"\n    @return subtract($n, 1);\n","type":"function"},"description":"Deincrements its argument.\n\n","example":[{"code":"$nineteen: dec(20);\n@debug $nineteen; //=> 19","type":"scss","description":"dec"}],"access":"public","parameter":[{"name":"n","type":"Number","description":null}],"see":[{"context":{"name":"inc","type":"function"}}],"usedBy":null},{"file":{"name":"_dissoc.scss","path":"_dissoc.scss"},"group":["object"],"context":{"name":"dissoc","code":"\n    @return omit(($prop), $obj);\n","type":"function"},"description":"Returns a new object that does not contain a `prop` property.\n\n","example":[{"code":"$obj: (a: 1, b: 2, c: 3);\n$remove-prop: dissoc('b' $obj);\n@debug $remove-prop; //=> (a: 1, c: 3)","type":"scss","description":"dissoc"}],"access":"public","parameter":[{"name":"prop","type":"String","description":"The name of the property to dissociate"},{"name":"obj","type":"Object","description":"The object to clone"}],"see":[{"context":{"name":"assoc","type":"function"}},{"context":{"name":"pick","type":"function"}}],"usedBy":null},{"file":{"name":"_divide.scss","path":"_divide.scss"},"group":["math"],"context":{"name":"divide","code":"\n    @return $a / $b;\n","type":"function"},"description":"Divides two values.\n\n","example":[{"code":"$divide-numbers: divide(10, 2);\n@debug $divide-numbers; //=> 5","type":"scss","description":"divide"}],"access":"public","parameter":[{"name":"a","type":"Number","description":null},{"name":"b","type":"Number","description":null}],"see":null,"usedBy":null},{"file":{"name":"_eq-by.scss","path":"_eq-by.scss"},"group":["relation"],"context":{"name":"eq-by","code":"\n    $a: call(get-function($fn), $x);\n    $b: call(get-function($fn), $y);\n    @return equals($a, $b);\n","type":"function"},"description":"\nTakes a function and two values in its domain and returns `true` if the\nvalues map to the same value in the codomain; `false` otherwise.\n\n","example":[{"code":"$is-eq: eq-by(abs, 5, -5);\n@debug $is-eq; //=> true","type":"scss","description":"eq-by"}],"access":"public","parameter":[{"name":"fn","type":"Function","description":null},{"name":"x","type":"*","description":null},{"name":"y","type":"*","description":null}],"see":null,"usedBy":null},{"file":{"name":"_equals.scss","path":"_equals.scss"},"group":["relation"],"context":{"name":"equals","code":"\n    @return $a == $b;\n","type":"function"},"description":"\nReturns `true` if its arguments are equivalent, `false` otherwise. Handles\ncyclical data structures.\n\n","example":[{"code":"equals(1, 1); //=> true\nequals(1, '1'); //=> false\nequals([1, 2, 3], [1, 2, 3]); //=> true","type":"scss","description":"equals"}],"access":"public","parameter":[{"name":"a","type":"*","description":null},{"name":"b","type":"*","description":null}],"see":null,"usedBy":[{"context":{"name":"eq-by","type":"function"}},{"context":{"name":"path-eq","type":"function"}}]},{"file":{"name":"_F.scss","path":"_F.scss"},"group":["function"],"context":{"name":"F","code":"\n    @return false;\n","type":"function"},"description":"A function that always returns `false`.\nAny passed in parameters are ignored.\n\n","example":[{"code":"$not-true: F();\n@debug $not-true; //=> false","type":"scss","description":"F"}],"access":"public","parameter":null,"see":null,"usedBy":null},{"file":{"name":"_filter.scss","path":"_filter.scss"},"group":["list"],"context":{"name":"filter","code":"\n    @return head(partition($predicate, $list));\n","type":"function"},"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","example":[{"code":"@function isEven($n) {\n  @return $n % 2 == 0;\n}\n$only-even-plz: filter(isEven, (1, 2, 3, 4));\n@debug $only-even-plz; //=> (2 4)","type":"scss","description":"filter"}],"access":"public","parameter":[{"name":"pred","type":"Function","description":null},{"name":"filterable","type":"Array","description":null}],"see":[{"context":{"name":"reject","type":"function"}}],"usedBy":[{"context":{"name":"inner-join","type":"function"}}]},{"file":{"name":"_gt.scss","path":"_gt.scss"},"group":["relation"],"context":{"name":"gt","code":"\n    @return $a > $b;\n","type":"function"},"description":"\nReturns `true` if the first argument is greater than the second;\n`false` otherwise.\n\n","example":[{"code":"gt(2, 1); //=> true\ngt(2, 2); //=> false\ngt(2, 3); //=> false","type":"scss","description":"gt"}],"access":"public","parameter":[{"name":"a","type":"Number","description":null},{"name":"b","type":"Number","description":null}],"see":[{"context":{"name":"lt","type":"function"}}],"usedBy":null},{"file":{"name":"_gte.scss","path":"_gte.scss"},"group":["relation"],"context":{"name":"gte","code":"\n    @return $a >= $b;\n","type":"function"},"description":"\nReturns `true` if the first argument is greater than or equal to the second;\n`false` otherwise.\n\n","example":[{"code":"gte(2, 1); //=> true\ngte(2, 2); //=> true\ngte(2, 3); //=> false","type":"scss","description":"gte"}],"access":"public","parameter":[{"name":"a","type":"Number","description":null},{"name":"b","type":"Number","description":null}],"see":[{"context":{"name":"lte","type":"function"}}],"usedBy":null},{"file":{"name":"_has.scss","path":"_has.scss"},"group":["object"],"context":{"name":"has","code":"\n    $_prop: quote($prop);\n    @return hasPath($_prop, $obj);\n","type":"function"},"description":"Returns whether or not an object has a property with the specified name\n\n","example":[{"code":"$alice: (name: 'alice');\n$has-name: has('name', $alice);\n$has-flower: has('flower', $alice);\n@debug $has-name; //=> true\n@debug $has-flower; //=> false","type":"scss","description":"has"}],"access":"public","parameter":[{"name":"prop","type":"String","description":"The name of the property to check for."},{"name":"obj","type":"Object","description":"The object to query."}],"see":null,"usedBy":null},{"file":{"name":"_hasPath.scss","path":"_hasPath.scss"},"group":["undefined"],"context":{"name":"has-path","code":"\n    @return hasPath($path, $obj);\n","type":"function"},"description":"","example":null,"access":"public","parameter":null,"see":null,"usedBy":null},{"file":{"name":"_hasPath.scss","path":"_hasPath.scss"},"group":["object"],"context":{"name":"hasPath","code":"\n    @if length($path) == 0 {\n        @return false;\n    }\n    $val: $obj;\n    $idx: 1;\n\n    @while $idx <= length($path) {\n        @if map-has-key($val, nth($path, $idx)) {\n            $val: map-get($val, nth($path, $idx));\n            $idx: inc($idx);\n        } @else {\n            @return false;\n        }\n    }\n\n    @return true;\n","type":"function"},"description":"Returns whether or not a path exists in an object.\n\n","example":[{"code":"$nested-obj: (a: (b: 2));\n$has-path: hasPath(('a', 'b'), $nested-obj);\n$no-has-path: hasPath(('a', 'c'), $nested-obj);\n@debug $has-path; //=> true\n@debug $no-has-path; //=> false","type":"scss","description":"hasPath"}],"access":"public","parameter":[{"name":"path","type":"Array","description":"The path to use."},{"name":"obj","type":"Object","description":"The object to check the path in."}],"see":null,"usedBy":[{"context":{"name":"has","type":"function"}},{"context":{"name":"has-path","type":"function"}}]},{"file":{"name":"_head.scss","path":"_head.scss"},"group":["list"],"context":{"name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","type":"function"},"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","example":[{"code":"$first: head((1 2 3 4 5 6 7 8 9));\n@debug $first; //=> 1\n\n$first: head('hello world');\n@debug $first; //=> 'h'","type":"scss","description":"head"}],"access":"public","parameter":[{"name":"list","type":"Array|String","description":null}],"see":null,"usedBy":[{"context":{"name":"identity","type":"function"}},{"context":{"name":"filter","type":"function"}},{"context":{"name":"path","type":"function"}}]},{"file":{"name":"_identity.scss","path":"_identity.scss"},"group":["function"],"context":{"name":"identity","code":"\n    @return head($args);\n","type":"function"},"description":"A function that does nothing but return the parameter supplied to it. Good\nas a default or placeholder function.\n\n","example":[{"code":"$is-one: identity(1);\n@debug $is-one; //=> 1","type":"scss","description":"indentity"}],"access":"public","parameter":null,"see":null,"usedBy":null},{"file":{"name":"_implode.scss","path":"_implode.scss"},"group":["list"],"context":{"name":"implode","code":"\n    $result: '';\n    @for $i from 1 through length($xs) {\n        $delimiter: if($i != 1, quote($separator), '');\n        $item: #{$delimiter + nth($xs, $i)};\n        $result: #{$result + $item};\n    }\n\n    @return $result;\n","type":"function"},"description":"Returns a string made by inserting the `separator` between each element and\nconcatenating all the elements into a single string. Ramda defines this as\njoin but sass has it's own join method.\n\n","example":[{"code":"$imploded: implode('|', (1 2 3 4 5 6 7 8 9));\n@debug $imploded; //=> '1|2|3|4|5|6|7|8|9'","type":"scss","description":"implode"}],"access":"public","parameter":[{"name":"separator","type":"Number|String","description":"The string used to separate the elements."},{"name":"xs","type":"Array","description":"The elements to join into a string."}],"see":null,"usedBy":[{"context":{"name":"trim","type":"function"}}]},{"file":{"name":"_inc.scss","path":"_inc.scss"},"group":["math"],"context":{"name":"inc","code":"\n    @return add($n, 1);\n","type":"function"},"description":"Increments its argument.\n\n","example":[{"code":"$twenty: inc(19);\n@debug $twenty; //=> 20","type":"scss","description":"inc"}],"access":"public","parameter":[{"name":"n","type":"Number","description":null}],"see":[{"context":{"name":"dec","type":"function"}}],"usedBy":[{"context":{"name":"hasPath","type":"function"}},{"context":{"name":"pick","type":"function"}},{"context":{"name":"props","type":"function"}}]},{"file":{"name":"_init.scss","path":"_init.scss"},"group":["list"],"context":{"name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","type":"function"},"description":"Returns all but the last element of the given list or string.\n\n","example":[{"code":"$first: init((1 2 3 4 5 6 7 8 9));\n@debug $first; //=> (1 2 3 4 5 6 7 8)\n\n$first: init('hello world');\n@debug $first; //=> 'hello worl'","type":"scss","description":"init"}],"access":"public","parameter":[{"name":"list","type":"List|String","description":null}],"see":[{"context":{"name":"last","type":"function"}},{"context":{"name":"head","type":"function"}},{"context":{"name":"tail","type":"function"}}],"usedBy":[{"context":{"name":"compose","type":"function"}},{"context":{"name":"pipe","type":"function"}},{"context":{"name":"paths","type":"function"}}]},{"file":{"name":"_inner-join.scss","path":"_inner-join.scss"},"group":["relation"],"context":{"name":"inner-join","code":"\n    $_sass-fire-inner-join-fn: $pred !global;\n    $_sass-fire-inner-join-list: $b !global;\n    @return filter(_inner-join-filter, $a);\n","type":"function"},"description":"Takes a predicate and two lists and returns a list comprising each of\nthe elements of `a` which is equal to one or more\nelements of `b` according to `pred`.\n\n","example":[{"code":"$buffalos: inner-join(\n  (record, id) => record.id === id,\n  [{id: 824, name: 'Richie Furay'},\n   {id: 956, name: 'Dewey Martin'},\n   {id: 313, name: 'Bruce Palmer'},\n   {id: 456, name: 'Stephen Stills'},\n   {id: 177, name: 'Neil Young'}],\n  [177, 456, 999]\n);\n@debug $buffalos; //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]","type":"scss","description":"inner-join"}],"access":"public","parameter":[{"name":"pred","type":"Function","description":null},{"name":"a","type":"Array","description":null},{"name":"b","type":"Array","description":null}],"see":[{"context":{"name":"intersection","type":"function"}}],"usedBy":null},{"file":{"name":"_intersection.scss","path":"_intersection.scss"},"group":["relation"],"context":{"name":"intersection","code":"\n    $lookup: if(length($list1) > length($list2), $list1, $list2);\n    $filtered: if(length($list1) > length($list2), $list2, $list1);\n    $_sass-fire-intersection-array: $filtered !global;\n    $result: compose(uniq, (filter, _sass-fire-intersection-filter), $lookup);\n    @return $result;\n","type":"function"},"description":"\nCombines two lists into a set (i.e. no duplicates) composed of those\nelements common to both lists.\n\n","example":[{"code":"$four-n-three: intersection([1,2,3,4], [7,6,5,4,3]);\n@debug $four-n-three; //=> [4, 3]","type":"scss","description":"intersection"}],"access":"public","parameter":[{"name":"list1","type":"Array","description":"The first list."},{"name":"list2","type":"Array","description":"The second list."}],"see":[{"context":{"name":"inner-join","type":"function"}}],"usedBy":null},{"file":{"name":"_last.scss","path":"_last.scss"},"group":["list"],"context":{"name":"last","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, str-length($list), str-length($list));\n    }\n    @return nth($list, length($list));\n","type":"function"},"description":"Returns the last element of the given list or string.\n\n","example":[{"code":"$last: last((1 2 3 4 5 6 7 8 9));\n@debug $last; //=> 9\n\n$last: last('hello world');\n@debug $last; //=> 'd'","type":"scss","description":"last"}],"access":"public","parameter":[{"name":"list","type":"List|String","description":null}],"see":[{"context":{"name":"init","type":"function"}},{"context":{"name":"head","type":"function"}},{"context":{"name":"tail","type":"function"}}],"usedBy":[{"context":{"name":"compose","type":"function"}},{"context":{"name":"pipe","type":"function"}},{"context":{"name":"reject","type":"function"}},{"context":{"name":"paths","type":"function"}}]},{"file":{"name":"_lt.scss","path":"_lt.scss"},"group":["relation"],"context":{"name":"lt","code":"\n    @return $a < $b;\n","type":"function"},"description":"\nReturns `true` if the first argument is less than the second;\n`false` otherwise.\n\n","example":[{"code":"lt(2, 1); //=> false\nlt(2, 2); //=> false\nlt(2, 3); //=> true","type":"scss","description":"lt"}],"access":"public","parameter":[{"name":"a","type":"Number","description":null},{"name":"b","type":"Number","description":null}],"see":[{"context":{"name":"gt","type":"function"}}],"usedBy":null},{"file":{"name":"_lte.scss","path":"_lte.scss"},"group":["relation"],"context":{"name":"lte","code":"\n    @return $a <= $b;\n","type":"function"},"description":"\nReturns `true` if the first argument is less than or equal to the second;\n`false` otherwise.\n\n","example":[{"code":"lte(2, 1); //=> false\nlte(2, 2); //=> true\nlte(2, 3); //=> true","type":"scss","description":"lte"}],"access":"public","parameter":[{"name":"a","type":"Number","description":null},{"name":"b","type":"Number","description":null}],"see":[{"context":{"name":"gte","type":"function"}}],"usedBy":null},{"file":{"name":"_map.scss","path":"_map.scss"},"group":["list"],"context":{"name":"map","code":"\n    $accumulator: ();\n\n    @if type-of($list) == 'map' {\n        @each $key, $value in $list {\n            $accumulator: map-merge(\n                $accumulator,\n                (\n                    $key: call(get-function($function), $value),\n                )\n            );\n        }\n    } @else {\n        @for $i from 1 through length($list) {\n            $item: nth($list, $i);\n            $accumulator: append(\n                $accumulator,\n                call(get-function($function), $item)\n            );\n        }\n    }\n    @return $accumulator;\n","type":"function"},"description":"Takes a function and applies the function to each of the functor's values,\nand returns a functor of the same shape.\nsass-fire provides suitable map implementations for List and Map.\n\n","example":[{"code":"@function double($number) { @return $number * 2; }\n$double-list: map(double, [1 2 3 4 5 6 7 8 9]);\n@debug $double-list; //=> [2 4 6 8 10 12 14 16 18]\n\n@function double($number) { @return $number * 2; }\n$double-obj: map(double, (x: 1, y: 2, z: 3));\n@debug $double-obj; //=> (x: 2, y: 4, z: 6)","type":"scss","description":"map"}],"access":"public","parameter":[{"name":"fn","type":"Function","description":"The function to be called on every element of the input `list`."},{"name":"list","type":"Array | Object","description":"The list to be iterated over."}],"see":null,"usedBy":[{"context":{"name":"paths","type":"function"}}]},{"file":{"name":"_mean.scss","path":"_mean.scss"},"group":["math"],"context":{"name":"mean","code":"\n    @return sum($list) / length($list);\n","type":"function"},"description":"Returns the mean average of the given list of numbers.\n\n","example":[{"code":"$mean-average: mean(2, 7, 9);\n@debug $mean-average; //=> 6","type":"scss","description":"mean"}],"access":"public","parameter":[{"name":"list","type":"List","description":null}],"see":null,"usedBy":[{"context":{"name":"median","type":"function"}}]},{"file":{"name":"_median.scss","path":"_median.scss"},"group":["math"],"context":{"name":"median","code":"\n    $length: length($list);\n    $sorted-list: __sort-list-of-numbers($list);\n    $width: 2 - $length % 2;\n    $idx: ($length - $width) / 2;\n    // compensate for list index starting at 1\n    $result: slice($idx + 1, ($idx + $width), $sorted-list);\n\n    @if length($result) == 1 {\n        @return nth($result, 1);\n    } @else {\n        @return mean($result...);\n    }\n","type":"function"},"description":"Returns the median average of the given list of numbers.\n\n","example":[{"code":"$median-average: median(12, 5, 17, 1, 7);\n@debug $median-average; //=> 7","type":"scss","description":"median"}],"access":"public","parameter":[{"name":"list","type":"List","description":null}],"see":null,"usedBy":null},{"file":{"name":"_merge.scss","path":"_merge.scss"},"group":["object"],"context":{"name":"merge","code":"\n    @return map-merge($l, $r);\n","type":"function"},"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","example":[{"code":"$merge-objs: merge(concat,\n  ( 'name': 'fred', 'age': 10 )\n  ( 'age': 40 )\n);\n@debug $merge-objs; //=> ( 'name': 'fred', 'age': 40 )","type":"scss","description":"merge"}],"access":"public","parameter":[{"name":"l","type":"Object","description":"left object"},{"name":"r","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge-right","type":"function"}},{"context":{"name":"merge-deep-right","type":"function"}},{"context":{"name":"merge-with","type":"function"}},{"context":{"name":"merge-with-key","type":"function"}}],"usedBy":[{"context":{"name":"merge-left","type":"function"}},{"context":{"name":"merge-right","type":"function"}}]},{"file":{"name":"_merge-all.scss","path":"_merge-all.scss"},"group":["list"],"context":{"name":"merge-all","code":"\n    $result: ();\n    @each $item in $list {\n        $result: map-merge($result, $item);\n    }\n\n    @return $result;\n","type":"function"},"description":"Merges a list of objects together into one object.\n\n","example":[{"code":"$merge-objs: merge-all((foo: 1), (bar: 2), (baz: 3));\n@debug $merge-objs; //=> (foo: 1, bar: 2, baz: 3)\n\n$override-props: merge-all((foo: 1), (foo: 2), (bar: 2));\n@debug $override-props; //=> (foo: 2, bar: 2)","type":"scss","description":"merge-all"}],"access":"public","parameter":[{"name":"list","type":"List","description":"array of objects"}],"see":[{"context":{"name":"reduce","type":"function"}}],"usedBy":null},{"file":{"name":"_merge-deep-left.scss","path":"_merge-deep-left.scss"},"group":["object"],"context":{"name":"merge-deep-left","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-left-caller,\n        $l-obj,\n        $r-obj\n    );\n","type":"function"},"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the first object will be used.\n\n","example":[{"code":"$merge-objs: merge-deep-left(\n  ( name: 'fred', age: 10, contact: ( email: 'moo@example.com' )),\n  ( age: 40, contact: ( email: 'baa@example.com' ))\n);\n@debug $merge-objs; //=> ( name: 'fred', age: 10, contact: ( email: 'moo@example.com' ))","type":"scss","description":"merge-deep-left"}],"access":"public","parameter":[{"name":"l-obj","type":"Object","description":"left object"},{"name":"r-obj","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge","type":"function"}},{"context":{"name":"merge-deep-right","type":"function"}},{"context":{"name":"merge-deep-with","type":"function"}},{"context":{"name":"merge-deep-with-key","type":"function"}}],"usedBy":null},{"file":{"name":"_merge-deep-right.scss","path":"_merge-deep-right.scss"},"group":["object"],"context":{"name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","type":"function"},"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","example":[{"code":"$merge-objs: merge-deep-right(\n  ( name: 'fred', age: 10, contact: ( email: 'moo@example.com' )),\n  ( age: 40, contact: ( email: 'baa@example.com' ))\n);\n@debug $merge-objs; //=> ( name: 'fred', age: 40, contact: ( email: 'baa@example.com' ))","type":"scss","description":"merge-deep-right"}],"access":"public","parameter":[{"name":"l-obj","type":"Object","description":"left object"},{"name":"r-obj","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge","type":"function"}},{"context":{"name":"merge-deep-left","type":"function"}},{"context":{"name":"merge-deep-with","type":"function"}},{"context":{"name":"merge-deep-with-key","type":"function"}}],"usedBy":null},{"file":{"name":"_merge-deep-with.scss","path":"_merge-deep-with.scss"},"group":["object"],"context":{"name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","type":"function"},"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","example":[{"code":"$merge-objs: merge-deep-with(concat,\n  ( a: true, c: ( thing: 'foo', values: [10, 20] ))\n  ( b: true, c: ( thing: 'bar', values: [15, 35] ))\n);\n@debug $merge-objs; //=> ( a: true, b: true, c: ( thing: 'bar', values: [10, 20, 15, 35] ))","type":"scss","description":"merge-deep-with"}],"access":"public","parameter":[{"name":"fn","type":"Function","description":"function to call when two keys match"},{"name":"l-obj","type":"Object","description":"left object"},{"name":"r-obj","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge-deep-with-key","type":"function"}},{"context":{"name":"merge-with","type":"function"}}],"usedBy":null},{"file":{"name":"_merge-deep-with-key.scss","path":"_merge-deep-with-key.scss"},"group":["object"],"context":{"name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","type":"function"},"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","example":[{"code":"@function concat-values($k, $l, $r) { @return if($k == 'values', concat($l, $r), $r);\n\n$merge-objs: merge-deep-with-key(concatValues,\n  ( a: true, c: ( thing: 'foo', values: [10, 20] ))\n  ( b: true, c: ( thing: 'bar', values: [15, 35] ))\n);\n@debug $merge-objs; //=> ( a: true, b: true, c: ( thing: 'bar', values: [10, 20, 15, 35] ))","type":"scss","description":"merge-deep-with-key"}],"access":"public","parameter":[{"name":"fn","type":"Function","description":"function to call when two keys match"},{"name":"l-obj","type":"Object","description":"left object"},{"name":"r-obj","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge-with-key","type":"function"}},{"context":{"name":"merge-deep-with","type":"function"}}],"usedBy":[{"context":{"name":"merge-deep-left","type":"function"}},{"context":{"name":"merge-deep-right","type":"function"}},{"context":{"name":"merge-deep-with","type":"function"}}]},{"file":{"name":"_merge-left.scss","path":"_merge-left.scss"},"group":["object"],"context":{"name":"merge-left","code":"\n    @return merge($r, $l);\n","type":"function"},"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the first object will be used.\n\n","example":[{"code":"$merge-objs: merge-left((x: 0), (x: 5, y: 2));\n@debug $merge-objs; //=> (x: 0, y: 2);","type":"scss","description":"merge-left"}],"access":"public","parameter":[{"name":"l","type":"Object","description":"left object"},{"name":"r","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge-right","type":"function"}},{"context":{"name":"merge-deep-right","type":"function"}},{"context":{"name":"merge-with","type":"function"}},{"context":{"name":"merge-with-key","type":"function"}}],"usedBy":null},{"file":{"name":"_merge-right.scss","path":"_merge-right.scss"},"group":["object"],"context":{"name":"merge-right","code":"\n    @return merge($l, $r);\n","type":"function"},"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","example":[{"code":"$merge-objs: merge-right((x: 0), (x: 5, y: 2));\n@debug $merge-objs; //=> (x: 5, y: 2);","type":"scss","description":"merge-right"}],"access":"public","parameter":[{"name":"l","type":"Object","description":"left object"},{"name":"r","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge-left","type":"function"}},{"context":{"name":"merge-deep-right","type":"function"}},{"context":{"name":"merge-with","type":"function"}},{"context":{"name":"merge-with-key","type":"function"}}],"usedBy":null},{"file":{"name":"_merge-with.scss","path":"_merge-with.scss"},"group":["object"],"context":{"name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","type":"function"},"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","example":[{"code":"$merge-objs: merge-with(concat,\n  ( a: true, values: [10, 20] )\n  ( b: true, values: [15, 35] )\n);\n@debug $merge-objs; //=> ( a: true, b: true, values: [10, 20, 15, 35] )","type":"scss","description":"merge-with"}],"access":"public","parameter":[{"name":"fn","type":"Function","description":"function to call when two keys match"},{"name":"l","type":"Object","description":"left object"},{"name":"r","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge-deep-with-key","type":"function"}},{"context":{"name":"merge","type":"function"}},{"context":{"name":"merge-with-key","type":"function"}}],"usedBy":null},{"file":{"name":"_merge-with-key.scss","path":"_merge-with-key.scss"},"group":["object"],"context":{"name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","type":"function"},"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","example":[{"code":"@function concat-values($k, $l, $r) { @return if($k == 'values', concat($l, $r), $r);\n\n$merge-objs: merge-with-key(concat-values,\n  ( 'a': true, 'thing': 'foo', 'values': [10 20] )\n  ( 'b': true, 'thing': 'bar', 'values': [15 25] )\n);\n@debug $merge-objs; //=> ( a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] )","type":"scss","description":"merge-with-key"}],"access":"public","parameter":[{"name":"fn","type":"Function","description":"function to call when two keys match"},{"name":"l","type":"Object","description":"left object"},{"name":"r","type":"Object","description":"right object"}],"see":[{"context":{"name":"merge-deep-with-key","type":"function"}},{"context":{"name":"merge","type":"function"}},{"context":{"name":"merge-with","type":"function"}}],"usedBy":[{"context":{"name":"merge-deep-with-key","type":"function"}},{"context":{"name":"merge-with","type":"function"}}]},{"file":{"name":"_multiply.scss","path":"_multiply.scss"},"group":["math"],"context":{"name":"multiply","code":"\n    @return $a * $b;\n","type":"function"},"description":"Multiplies two values.\n\n","example":[{"code":"$multiply-numbers: multiply(10, 2);\n@debug $multiply-numbers; //=> 20","type":"scss","description":"multiply"}],"access":"public","parameter":[{"name":"a","type":"Number","description":null},{"name":"b","type":"Number","description":null}],"see":null,"usedBy":null},{"file":{"name":"_negate.scss","path":"_negate.scss"},"group":["math"],"context":{"name":"negate","code":"\n    @return -$n;\n","type":"function"},"description":"Negates its argument.\n\n","example":[{"code":"$negate-numbers: negate(40);\n@debug $negate-numbers; //=> -40","type":"scss","description":"negate"}],"access":"public","parameter":[{"name":"n","type":"Number","description":null}],"see":null,"usedBy":null},{"file":{"name":"_omit.scss","path":"_omit.scss"},"group":["object"],"context":{"name":"omit","code":"\n    $result: ();\n    $index: ();\n    $idx: 1;\n    $length: length($keys);\n\n    @while $idx <= $length {\n        $index: map-merge($index, (#{nth($keys, $idx)}: 1));\n        $idx: $idx + 1;\n    }\n\n    @each $prop, $val in $map {\n        @if not map-has-key($index, $prop) {\n            $result: map-merge($result, (#{$prop}: $val));\n        }\n    }\n\n    @return $result;\n","type":"function"},"description":"Returns a partial copy of an object omitting the specified keys\n\n","example":[{"code":"$map-omit: omit((tom, harry), (tom: 1, dick: 2, harry: 3));\n@debug $map-omit; //=> (dick: 2)","type":"scss","description":"omit"}],"access":"public","parameter":[{"name":"keys","type":"List","description":"keys to remove from the map"},{"name":"map","type":"Map","description":"the map to copy from"}],"see":null,"usedBy":[{"context":{"name":"dissoc","type":"function"}}]},{"file":{"name":"_partition.scss","path":"_partition.scss"},"group":["list"],"context":{"name":"partition","code":"\n    $satisfy: ();\n    $dissatisfy: ();\n    @each $item in $filterable {\n        $truthy: call(get-function($pred), $item);\n        @if $truthy {\n            $satisfy: append($satisfy, $item);\n        } @else {\n            $dissatisfy: append($dissatisfy, $item);\n        }\n    }\n    @return ($satisfy, $dissatisfy);\n","type":"function"},"description":"Takes a predicate and a list and returns a pair of filterable lists of the same type of\nelements which do and do not satisfy, the predicate, respectively.\n\n","example":[{"code":"@function is-even($n) { @return $n % 2 == 0; }\n\n$even-n-odd: partition(is-even, (1, 2, 3, 4));\n@debug $even-n-odd; //=> ((2 4), (1 3))","type":"scss","description":"partition"}],"access":"public","parameter":[{"name":"pred","type":"Function","description":"A predicate to determine which side the element belongs to."},{"name":"filterable","type":"Array","description":"the list to partition."}],"see":[{"context":{"name":"filter","type":"function"}},{"context":{"name":"reject","type":"function"}}],"usedBy":[{"context":{"name":"filter","type":"function"}},{"context":{"name":"reject","type":"function"}}]},{"file":{"name":"_path.scss","path":"_path.scss"},"group":["object"],"context":{"name":"path","code":"\n    @return head(paths($path, $map));\n","type":"function"},"description":"Retrieves the value at a given path of an object\n\n","example":[{"code":"$get-value: path(('a', 'b'), (a: (b: 2)));\n@debug $get-value; //=> 2","type":"scss","description":"path"}],"access":"public","parameter":[{"name":"path","type":"List","description":"The path to use."},{"name":"map","type":"Object","description":"The map to retrieve the nested property from."}],"see":null,"usedBy":[{"context":{"name":"path-satisfies","type":"function"}},{"context":{"name":"path-or","type":"function"}},{"context":{"name":"path-eq","type":"function"}}]},{"file":{"name":"_path-eq.scss","path":"_path-eq.scss"},"group":["relation"],"context":{"name":"path-eq","code":"\n    @return equals(path($path, $map), $value);\n","type":"function"},"description":"Determines whether a nested path on an object has a specific value.\nMost likely used to filter a list.\n\n","example":[{"code":"$is-42: path-eq(('x', 'y'), 42, (x: (y: 42)));\n@debug $is-42; //=> true","type":"scss","description":"path-eq"}],"access":"public","parameter":[{"name":"path","type":"List","description":"The path to use."},{"name":"value","type":"*","description":"The value to compare."},{"name":"map","type":"Object","description":"The map to retrieve the nested property from."}],"see":null,"usedBy":null},{"file":{"name":"_path-or.scss","path":"_path-or.scss"},"group":["object"],"context":{"name":"path-or","code":"\n    $value: path($path, $map);\n    @return if($value, $value, $d);\n","type":"function"},"description":"If the given, non-null object has a value at the given path, returns the\nvalue at that path. Otherwise returns the provided default value.\n\n","example":[{"code":"$get-default: path-or('N/A', ('x', 'y'), (a: (b: 2)));\n@debug $get-value; //=> \"N/A\"","type":"scss","description":"path-or"}],"access":"public","parameter":[{"name":"d","type":"*","description":"The default value."},{"name":"path","type":"List","description":"The path to use."},{"name":"map","type":"Object","description":"The map to retrieve the nested property from."}],"see":null,"usedBy":null},{"file":{"name":"_path-satisfies.scss","path":"_path-satisfies.scss"},"group":["logic"],"context":{"name":"path-satisfies","code":"\n    $value: path($path, $map);\n    @return if($value, call(get-function($pred), $value), false);\n","type":"function"},"description":"Returns `true` if the specified object property at given path satisfies the\ngiven predicate; `false` otherwise.\n\n","example":[{"code":"@function is-positive($n) { @return $n > 0; }\n$value-is-pos: path-satisfies(is-positive, ('a', 'b'), (a: (b: 2)));\n@debug $value-is-pos; //=> true","type":"scss","description":"path"}],"access":"public","parameter":[{"name":"pred","type":"Function","description":null},{"name":"path","type":"List","description":"The path to use."},{"name":"map","type":"Object","description":"The map to retrieve the nested property from."}],"see":null,"usedBy":null},{"file":{"name":"_paths.scss","path":"_paths.scss"},"group":["object"],"context":{"name":"paths","code":"\n    $map: last($args);\n    $paths: init($args);\n    $_sass-fire-paths-map: $map !global;\n\n    @return map(_sass-fire-path, $paths);\n","type":"function"},"description":"Retrieves the values at a given path of an object\n\n","example":[{"code":"$get-values: paths(('a', 'b'), ('p', 0, 'q'), (a: (b: 2), p: ((q: 3))));\n@debug $get-values; //=> (2, 3)","type":"scss","description":"paths"}],"access":"public","parameter":[{"name":"paths-array","type":"List","description":"The array of paths to be fetched."},{"name":"map","type":"Object","description":"The map to retrieve the nested properties from."}],"see":null,"usedBy":[{"context":{"name":"path","type":"function"}}]},{"file":{"name":"_pick.scss","path":"_pick.scss"},"group":["object"],"context":{"name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","type":"function"},"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","example":[{"code":"$picky: pick(a d, ( a: 1, b: 2, c: 3, d: 4 ));\n@debug $picky; //=> (a: 1, d: 4)","type":"scss","description":"pick"}],"access":"public","parameter":[{"name":"names","type":"Array","description":"an array of String property names to copy onto a new object"},{"name":"obj","type":"Object","description":"The object to copy from"}],"see":[{"context":{"name":"omit","type":"function"}},{"context":{"name":"props","type":"function"}}],"usedBy":null},{"file":{"name":"_pipe.scss","path":"_pipe.scss"},"group":["function"],"context":{"name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","type":"function"},"description":"Performs left-to-right function composition.\n\n","example":[{"code":"$input: ('a', 'b', 'c');\n$output: pipe(\n  (join, ('d', 'e')),\n  (implode, '-'),\n  $input);\n@debug $output; //=> 'd-e-a-b-c'","type":"scss","description":"pipe"}],"access":"public","parameter":[{"name":"functions...","type":"Function...","description":"The functions to compose"}],"see":[{"context":{"name":"compose","type":"function"}}],"usedBy":null},{"file":{"name":"_product.scss","path":"_product.scss"},"group":["math"],"context":{"name":"product","code":"\n    @return reduce(multiply, 1, $list);\n","type":"function"},"description":"Multiplies together all the elements of a list.\n\n","example":[{"code":"$multipy-list: product(2, 4, 6, 8, 100, 2);\n@debug $multipy-list; //=> 76800","type":"scss","description":"product"}],"access":"public","parameter":[{"name":"list","type":"Array","description":"An array of numbers"}],"see":null,"usedBy":null},{"file":{"name":"_props.scss","path":"_props.scss"},"group":["object"],"context":{"name":"props","code":"\n    $length: length($names);\n    $result: ();\n    $idx: 1;\n    // TODO: use pick and map-values instead of while.\n    @while ($idx <= $length) {\n        $key: nth($names, $idx);\n        @if (map-has-key($obj, $key)) {\n            $result: append($result, map-get($obj, $key), 'comma');\n        } @else {\n            $result: append($result, false, 'comma');\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","type":"function"},"description":"Acts as multiple `prop`: array of keys in, array of values out.\n\n","example":[{"code":"$list-of-values-plz: props(a d, ( a: 1, b: 2, c: 3, d: 4 ));\n@debug $list-of-values-plz; //=> (1, 4)","type":"scss","description":"props"}],"access":"public","parameter":[{"name":"names","type":"Array","description":"The property names to fetch"},{"name":"obj","type":"Object","description":"The object to query"}],"see":null,"usedBy":null},{"file":{"name":"_reduce.scss","path":"_reduce.scss"},"group":["list"],"context":{"name":"reduce","code":"\n    $accumulator: $acc;\n    @for $i from 1 through length($list) {\n        $accumulator: call(\n            get-function($function),\n            $accumulator,\n            nth($list, $i)\n        );\n    }\n\n    @return $accumulator;\n","type":"function"},"description":"Returns a single item by iterating through the list, successively calling\nthe iterator function and passing it an accumulator value and the current\nvalue from the array, and then passing the result to the next call.\n\n","example":[{"code":"$sum-of-numbers-plz: reduce(add, 0, (1 2 3 4 5 6 7 8 9));\n@debug $sum-of-numbers-plz; //=> 45","type":"scss","description":"reduce"}],"access":"public","parameter":[{"name":"fn","type":"Function","description":"The iterator function. Receives two values, the accumulator and the\ncurrent element from the array."},{"name":"acc","type":"*","description":"The accumulator value."},{"name":"list","type":"Array","description":"The list to iterate over."}],"see":null,"usedBy":[{"context":{"name":"uniq","type":"function"}},{"context":{"name":"product","type":"function"}},{"context":{"name":"sum","type":"function"}}]},{"file":{"name":"_reject.scss","path":"_reject.scss"},"group":["list"],"context":{"name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","type":"function"},"description":"The complement of `filter`\n\n","example":[{"code":"@function isEven($n) {\n  @return $n % 2 == 0;\n}\n$only-odd-plz: reject(isEven, (1, 2, 3, 4));\n@debug $only-odd-plz; //=> (1 3)","type":"scss","description":"reject"}],"access":"public","parameter":[{"name":"pred","type":"Function","description":null},{"name":"filterable","type":"Array","description":null}],"see":[{"context":{"name":"filter","type":"function"}}],"usedBy":null},{"file":{"name":"_slice.scss","path":"_slice.scss"},"group":["list"],"context":{"name":"slice","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, $from-index, $to-index);\n    }\n\n    $result: ();\n    @for $i from $from-index through $to-index {\n        $result: append($result, nth($list, $i));\n    }\n    @return $result;\n","type":"function"},"description":"Returns the elements of the given list or string\nfrom `fromIndex` to `toIndex`.\n\n","example":[{"code":"$sliced: slice(5, 9, (1 2 3 4 5 6 7 8 9));\n@debug $sliced; //=> (5 6 7 8 9)","type":"scss","description":"slice-array"},{"code":"$sliced: slice(1, 4, 'hello world');\n@debug $sliced; //=> 'hell'","type":"scss","description":"slice-string"}],"access":"public","parameter":[{"name":"fromIndex","type":"Number","description":"The start index."},{"name":"toIndex","type":"Number","description":"The end index."},{"name":"list","type":"*","description":null}],"see":null,"usedBy":[{"context":{"name":"init","type":"function"}},{"context":{"name":"tail","type":"function"}},{"context":{"name":"median","type":"function"}}]},{"file":{"name":"_split.scss","path":"_split.scss"},"group":["string"],"context":{"name":"split","code":"\n    $delimiter-length: str-length($sep);\n    $idx: str-index($str, $sep);\n    $result: ();\n    @while $idx != null {\n        $result: append($result, str-slice($str, 1, $idx - 1), 'comma');\n        $str: str-slice($str, $idx + $delimiter-length);\n        $idx: str-index($str, $sep);\n    }\n    @return append($result, $str);\n","type":"function"},"description":"Splits a string into an array of strings based on the given\nseparator.\n\n","example":[{"code":"$splitted: split('-', 'a-b-c-d-e-f-g');\n@debug $splitted; //=> ('a', 'b', 'c', 'd', 'e', 'f', 'g')","type":"scss","description":"split"}],"access":"public","parameter":[{"name":"sep","type":"String","description":"The pattern."},{"name":"str","type":"String","description":"The string to separate into an array."}],"see":[{"context":{"name":"implode","type":"function"}}],"usedBy":[{"context":{"name":"trim","type":"function"}}]},{"file":{"name":"_subtract.scss","path":"_subtract.scss"},"group":["math"],"context":{"name":"subtract","code":"\n    @return $a - $b;\n","type":"function"},"description":"Subtract two values.\n\n","example":[{"code":"$subtract-numbers: subtract(10, 20);\n@debug $subtract-numbers; //=> 10","type":"scss","description":"subtract"}],"access":"public","parameter":[{"name":"a","type":"Number","description":null},{"name":"b","type":"Number","description":null}],"see":null,"usedBy":[{"context":{"name":"dec","type":"function"}}]},{"file":{"name":"_sum.scss","path":"_sum.scss"},"group":["math"],"context":{"name":"sum","code":"\n    @return reduce(add, 0, $list);\n","type":"function"},"description":"Adds a list of numbers together.\n\n","example":[{"code":"$add-list: sum((10, 20, 30, 40, 50, 60, 70, 80, 90))\n@debug $add-list; //=> 450","type":"scss","description":"sum"}],"access":"public","parameter":[{"name":"list","type":"List","description":null}],"see":null,"usedBy":[{"context":{"name":"mean","type":"function"}}]},{"file":{"name":"_T.scss","path":"_T.scss"},"group":["function"],"context":{"name":"T","code":"\n    @return true;\n","type":"function"},"description":"A function that always returns `true`.\nAny passed in parameters are ignored.\n\n","example":[{"code":"$so-true: T();\n@debug $so-true; //=> true","type":"scss","description":"F"}],"access":"public","parameter":null,"see":null,"usedBy":null},{"file":{"name":"_tail.scss","path":"_tail.scss"},"group":["list"],"context":{"name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","type":"function"},"description":"Returns all but the first element of the given list or string.\n\n","example":[{"code":"$without-first: tail((1 2 3 4 5 6 7 8 9));\n@debug $without-first; //=> (2 3 4 5 6 7 8 9)","type":"scss","description":"tail-array"},{"code":"$without-first: tail('hello world');\n@debug $without-first; //=> 'ello world'","type":"scss","description":"tail-string"}],"access":"public","parameter":[{"name":"list","type":"*","description":null}],"see":[{"context":{"name":"head","type":"function"}},{"context":{"name":"init","type":"function"}},{"context":{"name":"last","type":"function"}}],"usedBy":null},{"file":{"name":"_trim.scss","path":"_trim.scss"},"group":["string"],"context":{"name":"trim","code":"\n    $result: split(' ', $str);\n    @return implode($xs: $result);\n","type":"function"},"description":"Removes (strips) whitespace from both ends of the string.\n\n","example":[{"code":"$trimmed: trim('   the donkey jumped over the lazy snake    ');\n@debug $trimmed; //=> 'thedonkeyjumpedoverthelazysnake'","type":"scss","description":"trim"}],"access":"public","parameter":[{"name":"str","type":"String","description":"The string to trim."}],"see":null,"usedBy":null},{"file":{"name":"_uniq.scss","path":"_uniq.scss"},"group":["list"],"context":{"name":"uniq","code":"\n    $result: ();\n\n    @if type-of($list) == arglist and length(nth($list, 1)) == 0 {\n        @return $result;\n    }\n\n    $_list: if(\n        type-of($list) == arglist and length($list) == 1,\n        reduce(append, (), nth($list, 1)),\n        $list\n    );\n    @each $item in $_list {\n        // should probably test with `get-function` for functions.\n        @if not index($result, $item) {\n            $result: append($result, $item);\n        }\n    }\n\n    @return $result;\n","type":"function"},"description":"\nReturns a new list containing only one copy of each element in the original\nlist.\n\n","example":[{"code":"uniq([1, 1, 2, 1]); //=> [1, 2]\nuniq([1, '1']);     //=> [1, '1']\nuniq([[42], [42]]); //=> [[42]]","type":"scss","description":"uniq"}],"access":"public","parameter":[{"name":"list","type":"Array","description":"The array to consider."}],"see":null,"usedBy":null},{"file":{"name":"_without.scss","path":"_without.scss"},"group":["list"],"context":{"name":"without","code":"\n    $result: [];\n    @each $item in $list2 {\n        @if not index($list1, $item) {\n            $result: append($result, $item, 'comma');\n        }\n    }\n    @return $result;\n","type":"function"},"description":"Returns a new list without values in the first argument.\n`equals` is used to determine equality.\n\n","example":[{"code":"$without-one-two: without([1, 2], [1, 2, 1, 4, 5]);\n@debug $without-one-two; //=> [4, 5]","type":"scss","description":"without"}],"access":"public","parameter":[{"name":"list1","type":"Array","description":"The values to be removed from `list2`."},{"name":"list2","type":"Array","description":"The array to remove values from."}],"see":null,"usedBy":null}],"parent":{"__typename":"File","name":"v1.2.0"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c6f4f5a3-bf5a-5cb0-a2d2-b33878c43d02","currentVersion":"v1.2.0"}}}