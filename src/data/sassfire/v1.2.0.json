{"sass-fire":[{"description":"Adds two values.\n\n","commentRange":{"start":1,"end":11},"context":{"type":"function","name":"add","code":"\n    @return $a + $b;\n","line":{"start":13,"end":15}},"group":["math"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$add-numbers: add(10, 20);\n@debug $add-numbers; //=> 30","description":"add"}],"access":"public","require":[],"file":{"path":"_add.scss","name":"_add.scss"},"usedBy":[{"description":"Increments its argument.\n\n","context":{"type":"function","name":"inc","code":"\n    @return add($n, 1);\n","line":{"start":15,"end":17}}}]},{"description":"Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value.\n\n","commentRange":{"start":1,"end":19},"context":{"type":"function","name":"assoc","code":"\n    @return map-merge($obj, (#{$prop}: $val));\n","line":{"start":21,"end":23}},"group":["object"],"parameter":[{"type":"String","name":"prop","description":"The property name to set"},{"type":"*","name":"val","description":"The new value"},{"type":"Object","name":"obj","description":"The object to clone"}],"return":{"type":"Object","description":"A new object equivalent to the original except for the changed property."},"see":[{"description":"Returns a new object that does not contain a `prop` property.\n\n","context":{"type":"function","name":"dissoc","code":"\n    @return omit(($prop), $obj);\n","line":{"start":18,"end":20}}},{"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","context":{"type":"function","name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":18,"end":29}}}],"example":[{"type":"scss","code":"$obj: (\n    a: 1,\n    b: 2\n);\n$set-prop: assoc('c', 3, $obj);\n@debug $set-prop; //=> ( a: 1, b: 2, c: 3)","description":"assoc"}],"access":"public","require":[],"file":{"path":"_assoc.scss","name":"_assoc.scss"}},{"description":"Performs right-to-left function composition. The right most parameter is the input\n\n","commentRange":{"start":6,"end":20},"context":{"type":"function","name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":22,"end":32}},"group":["function"],"parameter":[{"type":"Function...","name":"params...","description":"The functions and input to compose"}],"return":{"type":"*"},"see":[{"description":"Performs left-to-right function composition.\n\n","context":{"type":"function","name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":22,"end":31}}}],"example":[{"type":"scss","code":"$input: ('a', 'b', 'c');\n$output: compose(\n  (implode, '-'),\n  (join, ('d', 'e')),\n  $input);\n@debug $output; //=> 'd-e-a-b-c'","description":"compose"}],"access":"public","require":[{"type":"function","name":"init"},{"type":"function","name":"last"}],"file":{"path":"_compose.scss","name":"_compose.scss"},"usedBy":[{"description":"\nCombines two lists into a set (i.e. no duplicates) composed of those\nelements common to both lists.\n\n","context":{"type":"function","name":"intersection","code":"\n    $lookup: if(length($list1) > length($list2), $list1, $list2);\n    $filtered: if(length($list1) > length($list2), $list2, $list1);\n    $_sass-fire-intersection-array: $filtered !global;\n    $result: compose(uniq, (filter, _sass-fire-intersection-filter), $lookup);\n    @return $result;\n","line":{"start":22,"end":28}}}]},{"description":"Returns the result of concatenating the given lists or strings.\n\n","commentRange":{"start":1,"end":17},"context":{"type":"function","name":"concat","code":"\n    @if type-of($a) == 'list' and type-of($b) == 'list' {\n        @return join($a, $b);\n    }\n    @if type-of($a) == 'string' and type-of($b) == 'string' {\n        @return #{$a}#{$b};\n    }\n","line":{"start":19,"end":26}},"group":["list"],"parameter":[{"type":"Array|String","name":"a","description":"The first list"},{"type":"Array|String","name":"b","description":"The second list"}],"return":{"type":"Array|String","description":"A list consisting of the elements of `firstList`\nfollowed by the elements of `secondList`.\n"},"example":[{"type":"scss","code":"$concat-arrays: concat([1, 2, 3], [4, 5, 6]);\n@debug $concat-arrays //=> [1, 2, 3, 4, 5, 6]","description":"concat-arrays"},{"type":"scss","code":"$concat-strings: concat('ABC', 'DEF');\n@debug $concat-strings; //=> 'ABCDEF'","description":"concat-strings"}],"access":"public","require":[],"file":{"path":"_concat.scss","name":"_concat.scss"}},{"description":"Deincrements its argument.\n\n","commentRange":{"start":3,"end":13},"context":{"type":"function","name":"dec","code":"\n    @return subtract($n, 1);\n","line":{"start":15,"end":17}},"group":["math"],"parameter":[{"type":"Number","name":"n"}],"return":{"type":"Number","description":"n - 1"},"see":[{"description":"Increments its argument.\n\n","context":{"type":"function","name":"inc","code":"\n    @return add($n, 1);\n","line":{"start":15,"end":17}}}],"example":[{"type":"scss","code":"$nineteen: dec(20);\n@debug $nineteen; //=> 19","description":"dec"}],"access":"public","require":[{"type":"function","name":"subtract"}],"file":{"path":"_dec.scss","name":"_dec.scss"}},{"description":"Returns a new object that does not contain a `prop` property.\n\n","commentRange":{"start":3,"end":16},"context":{"type":"function","name":"dissoc","code":"\n    @return omit(($prop), $obj);\n","line":{"start":18,"end":20}},"group":["object"],"parameter":[{"type":"String","name":"prop","description":"The name of the property to dissociate"},{"type":"Object","name":"obj","description":"The object to clone"}],"return":{"type":"Object","description":"A new object equivalent to the original but without the specified property"},"see":[{"description":"Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value.\n\n","context":{"type":"function","name":"assoc","code":"\n    @return map-merge($obj, (#{$prop}: $val));\n","line":{"start":21,"end":23}}},{"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","context":{"type":"function","name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":18,"end":29}}}],"example":[{"type":"scss","code":"$obj: (a: 1, b: 2, c: 3);\n$remove-prop: dissoc('b' $obj);\n@debug $remove-prop; //=> (a: 1, c: 3)","description":"dissoc"}],"access":"public","require":[{"type":"function","name":"omit"}],"file":{"path":"_dissoc.scss","name":"_dissoc.scss"}},{"description":"Divides two values.\n\n","commentRange":{"start":1,"end":11},"context":{"type":"function","name":"divide","code":"\n    @return $a / $b;\n","line":{"start":13,"end":15}},"group":["math"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$divide-numbers: divide(10, 2);\n@debug $divide-numbers; //=> 5","description":"divide"}],"access":"public","require":[],"file":{"path":"_divide.scss","name":"_divide.scss"}},{"description":"\nTakes a function and two values in its domain and returns `true` if the\nvalues map to the same value in the codomain; `false` otherwise.\n\n","commentRange":{"start":3,"end":17},"context":{"type":"function","name":"eq-by","code":"\n    $a: call(get-function($fn), $x);\n    $b: call(get-function($fn), $y);\n    @return equals($a, $b);\n","line":{"start":19,"end":23}},"group":["relation"],"parameter":[{"type":"Function","name":"fn"},{"type":"*","name":"x"},{"type":"*","name":"y"}],"return":{"type":"Boolean"},"example":[{"type":"scss","code":"$is-eq: eq-by(abs, 5, -5);\n@debug $is-eq; //=> true","description":"eq-by"}],"access":"public","require":[{"type":"function","name":"equals"}],"file":{"path":"_eq-by.scss","name":"_eq-by.scss"}},{"description":"\nReturns `true` if its arguments are equivalent, `false` otherwise. Handles\ncyclical data structures.\n\n","commentRange":{"start":1,"end":15},"context":{"type":"function","name":"equals","code":"\n    @return $a == $b;\n","line":{"start":17,"end":19}},"group":["relation"],"parameter":[{"type":"*","name":"a"},{"type":"*","name":"b"}],"return":{"type":"Boolean"},"example":[{"type":"scss","code":"equals(1, 1); //=> true\nequals(1, '1'); //=> false\nequals([1, 2, 3], [1, 2, 3]); //=> true","description":"equals"}],"access":"public","require":[],"file":{"path":"_equals.scss","name":"_equals.scss"},"usedBy":[{"description":"\nTakes a function and two values in its domain and returns `true` if the\nvalues map to the same value in the codomain; `false` otherwise.\n\n","context":{"type":"function","name":"eq-by","code":"\n    $a: call(get-function($fn), $x);\n    $b: call(get-function($fn), $y);\n    @return equals($a, $b);\n","line":{"start":19,"end":23}}},{"description":"Determines whether a nested path on an object has a specific value.\nMost likely used to filter a list.\n\n","context":{"type":"function","name":"path-eq","code":"\n    @return equals(path($path, $map), $value);\n","line":{"start":18,"end":20}}}]},{"description":"A function that always returns `false`.\nAny passed in parameters are ignored.\n\n","commentRange":{"start":1,"end":10},"context":{"type":"function","name":"F","code":"\n    @return false;\n","line":{"start":12,"end":14}},"group":["function"],"return":{"type":"bool","description":"false\n"},"example":[{"type":"scss","code":"$not-true: F();\n@debug $not-true; //=> false","description":"F"}],"access":"public","file":{"path":"_F.scss","name":"_F.scss"}},{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","commentRange":{"start":4,"end":20},"context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":22,"end":24}},"group":["list"],"parameter":[{"type":"Function","name":"pred"},{"type":"Array","name":"filterable"}],"return":{"type":"Array","description":"Filterable"},"see":[{"description":"The complement of `filter`\n\n","context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":20,"end":22}}}],"example":[{"type":"scss","code":"@function isEven($n) {\n  @return $n % 2 == 0;\n}\n$only-even-plz: filter(isEven, (1, 2, 3, 4));\n@debug $only-even-plz; //=> (2 4)","description":"filter"}],"access":"public","require":[{"type":"function","name":"head"},{"type":"function","name":"partition"}],"file":{"path":"_filter.scss","name":"_filter.scss"},"usedBy":[{"description":"Takes a predicate and two lists and returns a list comprising each of\nthe elements of `a` which is equal to one or more\nelements of `b` according to `pred`.\n\n","context":{"type":"function","name":"inner-join","code":"\n    $_sass-fire-inner-join-fn: $pred !global;\n    $_sass-fire-inner-join-list: $b !global;\n    @return filter(_inner-join-filter, $a);\n","line":{"start":32,"end":36}}}]},{"description":"\nReturns `true` if the first argument is greater than the second;\n`false` otherwise.\n\n","commentRange":{"start":1,"end":16},"context":{"type":"function","name":"gt","code":"\n    @return $a > $b;\n","line":{"start":18,"end":20}},"group":["relation"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Boolean"},"see":[{"description":"\nReturns `true` if the first argument is less than the second;\n`false` otherwise.\n\n","context":{"type":"function","name":"lt","code":"\n    @return $a < $b;\n","line":{"start":18,"end":20}}}],"example":[{"type":"scss","code":"gt(2, 1); //=> true\ngt(2, 2); //=> false\ngt(2, 3); //=> false","description":"gt"}],"access":"public","require":[],"file":{"path":"_gt.scss","name":"_gt.scss"}},{"description":"\nReturns `true` if the first argument is greater than or equal to the second;\n`false` otherwise.\n\n","commentRange":{"start":1,"end":16},"context":{"type":"function","name":"gte","code":"\n    @return $a >= $b;\n","line":{"start":18,"end":20}},"group":["relation"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Boolean"},"see":[{"description":"\nReturns `true` if the first argument is less than or equal to the second;\n`false` otherwise.\n\n","context":{"type":"function","name":"lte","code":"\n    @return $a <= $b;\n","line":{"start":18,"end":20}}}],"example":[{"type":"scss","code":"gte(2, 1); //=> true\ngte(2, 2); //=> true\ngte(2, 3); //=> false","description":"gte"}],"access":"public","require":[],"file":{"path":"_gte.scss","name":"_gte.scss"}},{"description":"Returns whether or not an object has a property with the specified name\n\n","commentRange":{"start":3,"end":16},"context":{"type":"function","name":"has","code":"\n    $_prop: quote($prop);\n    @return hasPath($_prop, $obj);\n","line":{"start":18,"end":21}},"group":["object"],"parameter":[{"type":"String","name":"prop","description":"The name of the property to check for."},{"type":"Object","name":"obj","description":"The object to query."}],"return":{"type":"Boolean","description":"Whether the property exists.\n"},"example":[{"type":"scss","code":"$alice: (name: 'alice');\n$has-name: has('name', $alice);\n$has-flower: has('flower', $alice);\n@debug $has-name; //=> true\n@debug $has-flower; //=> false","description":"has"}],"access":"public","require":[{"type":"function","name":"hasPath"}],"file":{"path":"_has.scss","name":"_has.scss"}},{"description":"","commentRange":{"start":37,"end":37},"context":{"type":"function","name":"has-path","code":"\n    @return hasPath($path, $obj);\n","line":{"start":38,"end":40}},"alias":"hasPath","access":"public","group":["undefined"],"require":[{"type":"function","name":"hasPath"}],"file":{"path":"_hasPath.scss","name":"_hasPath.scss"}},{"description":"Returns whether or not a path exists in an object.\n\n","commentRange":{"start":3,"end":16},"context":{"type":"function","name":"hasPath","code":"\n    @if length($path) == 0 {\n        @return false;\n    }\n    $val: $obj;\n    $idx: 1;\n\n    @while $idx <= length($path) {\n        @if map-has-key($val, nth($path, $idx)) {\n            $val: map-get($val, nth($path, $idx));\n            $idx: inc($idx);\n        } @else {\n            @return false;\n        }\n    }\n\n    @return true;\n","line":{"start":18,"end":35}},"group":["object"],"parameter":[{"type":"Array","name":"path","description":"The path to use."},{"type":"Object","name":"obj","description":"The object to check the path in."}],"return":{"type":"Boolean","description":"Whether the path exists.\n"},"example":[{"type":"scss","code":"$nested-obj: (a: (b: 2));\n$has-path: hasPath(('a', 'b'), $nested-obj);\n$no-has-path: hasPath(('a', 'c'), $nested-obj);\n@debug $has-path; //=> true\n@debug $no-has-path; //=> false","description":"hasPath"}],"access":"public","require":[{"type":"function","name":"inc"}],"file":{"path":"_hasPath.scss","name":"_hasPath.scss"},"aliased":["has-path"],"usedBy":[{"description":"Returns whether or not an object has a property with the specified name\n\n","context":{"type":"function","name":"has","code":"\n    $_prop: quote($prop);\n    @return hasPath($_prop, $obj);\n","line":{"start":18,"end":21}}},{"description":"","context":{"type":"function","name":"has-path","code":"\n    @return hasPath($path, $obj);\n","line":{"start":38,"end":40}}}]},{"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","commentRange":{"start":1,"end":14},"context":{"type":"function","name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","line":{"start":16,"end":22}},"group":["list"],"parameter":[{"type":"Array|String","name":"list"}],"return":{"type":"*"},"example":[{"type":"scss","code":"$first: head((1 2 3 4 5 6 7 8 9));\n@debug $first; //=> 1\n\n$first: head('hello world');\n@debug $first; //=> 'h'","description":"head"}],"access":"public","require":[],"file":{"path":"_head.scss","name":"_head.scss"},"usedBy":[{"description":"A function that does nothing but return the parameter supplied to it. Good\nas a default or placeholder function.\n\n","context":{"type":"function","name":"identity","code":"\n    @return head($args);\n","line":{"start":14,"end":16}}},{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":22,"end":24}}},{"description":"Retrieves the value at a given path of an object\n\n","context":{"type":"function","name":"path","code":"\n    @return head(paths($path, $map));\n","line":{"start":16,"end":18}}}]},{"description":"A function that does nothing but return the parameter supplied to it. Good\nas a default or placeholder function.\n\n","commentRange":{"start":3,"end":12},"context":{"type":"function","name":"identity","code":"\n    @return head($args);\n","line":{"start":14,"end":16}},"group":["function"],"return":{"type":"bool","description":"true\n"},"example":[{"type":"scss","code":"$is-one: identity(1);\n@debug $is-one; //=> 1","description":"indentity"}],"access":"public","require":[{"type":"function","name":"head"}],"file":{"path":"_identity.scss","name":"_identity.scss"}},{"description":"Returns a string made by inserting the `separator` between each element and\nconcatenating all the elements into a single string. Ramda defines this as\njoin but sass has it's own join method.\n\n","commentRange":{"start":1,"end":13},"context":{"type":"function","name":"implode","code":"\n    $result: '';\n    @for $i from 1 through length($xs) {\n        $delimiter: if($i != 1, quote($separator), '');\n        $item: #{$delimiter + nth($xs, $i)};\n        $result: #{$result + $item};\n    }\n\n    @return $result;\n","line":{"start":15,"end":24}},"group":["list"],"parameter":[{"type":"Number|String","name":"separator","description":"The string used to separate the elements."},{"type":"Array","name":"xs","description":"The elements to join into a string."}],"return":{"type":"String","description":"str The string made by concatenating `xs` with `separator`.\n"},"example":[{"type":"scss","code":"$imploded: implode('|', (1 2 3 4 5 6 7 8 9));\n@debug $imploded; //=> '1|2|3|4|5|6|7|8|9'","description":"implode"}],"access":"public","require":[],"file":{"path":"_implode.scss","name":"_implode.scss"},"usedBy":[{"description":"Removes (strips) whitespace from both ends of the string.\n\n","context":{"type":"function","name":"trim","code":"\n    $result: split(' ', $str);\n    @return implode($xs: $result);\n","line":{"start":14,"end":17}}}]},{"description":"Increments its argument.\n\n","commentRange":{"start":3,"end":13},"context":{"type":"function","name":"inc","code":"\n    @return add($n, 1);\n","line":{"start":15,"end":17}},"group":["math"],"parameter":[{"type":"Number","name":"n"}],"return":{"type":"Number","description":"n + 1"},"see":[{"description":"Deincrements its argument.\n\n","context":{"type":"function","name":"dec","code":"\n    @return subtract($n, 1);\n","line":{"start":15,"end":17}}}],"example":[{"type":"scss","code":"$twenty: inc(19);\n@debug $twenty; //=> 20","description":"inc"}],"access":"public","require":[{"type":"function","name":"add"}],"file":{"path":"_inc.scss","name":"_inc.scss"},"usedBy":[{"description":"Returns whether or not a path exists in an object.\n\n","context":{"type":"function","name":"hasPath","code":"\n    @if length($path) == 0 {\n        @return false;\n    }\n    $val: $obj;\n    $idx: 1;\n\n    @while $idx <= length($path) {\n        @if map-has-key($val, nth($path, $idx)) {\n            $val: map-get($val, nth($path, $idx));\n            $idx: inc($idx);\n        } @else {\n            @return false;\n        }\n    }\n\n    @return true;\n","line":{"start":18,"end":35}}},{"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","context":{"type":"function","name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":18,"end":29}}},{"description":"Acts as multiple `prop`: array of keys in, array of values out.\n\n","context":{"type":"function","name":"props","code":"\n    $length: length($names);\n    $result: ();\n    $idx: 1;\n    // TODO: use pick and map-values instead of while.\n    @while ($idx <= $length) {\n        $key: nth($names, $idx);\n        @if (map-has-key($obj, $key)) {\n            $result: append($result, map-get($obj, $key), 'comma');\n        } @else {\n            $result: append($result, false, 'comma');\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":15,"end":30}}}]},{"description":"Returns all but the last element of the given list or string.\n\n","commentRange":{"start":3,"end":18},"context":{"type":"function","name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","line":{"start":20,"end":23}},"group":["list"],"parameter":[{"type":"List|String","name":"list"}],"return":{"type":"*"},"see":[{"description":"Returns the last element of the given list or string.\n\n","context":{"type":"function","name":"last","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, str-length($list), str-length($list));\n    }\n    @return nth($list, length($list));\n","line":{"start":18,"end":23}}},{"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","context":{"type":"function","name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","line":{"start":16,"end":22}}},{"description":"Returns all but the first element of the given list or string.\n\n","context":{"type":"function","name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","line":{"start":22,"end":25}}}],"example":[{"type":"scss","code":"$first: init((1 2 3 4 5 6 7 8 9));\n@debug $first; //=> (1 2 3 4 5 6 7 8)\n\n$first: init('hello world');\n@debug $first; //=> 'hello worl'","description":"init"}],"access":"public","require":[{"type":"function","name":"slice"}],"file":{"path":"_init.scss","name":"_init.scss"},"usedBy":[{"description":"Performs right-to-left function composition. The right most parameter is the input\n\n","context":{"type":"function","name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":22,"end":32}}},{"description":"Performs left-to-right function composition.\n\n","context":{"type":"function","name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":22,"end":31}}},{"description":"Retrieves the values at a given path of an object\n\n","context":{"type":"function","name":"paths","code":"\n    $map: last($args);\n    $paths: init($args);\n    $_sass-fire-paths-map: $map !global;\n\n    @return map(_sass-fire-path, $paths);\n","line":{"start":20,"end":26}}}]},{"description":"Takes a predicate and two lists and returns a list comprising each of\nthe elements of `a` which is equal to one or more\nelements of `b` according to `pred`.\n\n","commentRange":{"start":8,"end":31},"context":{"type":"function","name":"inner-join","code":"\n    $_sass-fire-inner-join-fn: $pred !global;\n    $_sass-fire-inner-join-list: $b !global;\n    @return filter(_inner-join-filter, $a);\n","line":{"start":32,"end":36}},"group":["relation"],"parameter":[{"type":"Function","name":"pred"},{"type":"Array","name":"a"},{"type":"Array","name":"b"}],"return":{"type":"Array"},"see":[{"description":"\nCombines two lists into a set (i.e. no duplicates) composed of those\nelements common to both lists.\n\n","context":{"type":"function","name":"intersection","code":"\n    $lookup: if(length($list1) > length($list2), $list1, $list2);\n    $filtered: if(length($list1) > length($list2), $list2, $list1);\n    $_sass-fire-intersection-array: $filtered !global;\n    $result: compose(uniq, (filter, _sass-fire-intersection-filter), $lookup);\n    @return $result;\n","line":{"start":22,"end":28}}}],"example":[{"type":"scss","code":"$buffalos: inner-join(\n  (record, id) => record.id === id,\n  [{id: 824, name: 'Richie Furay'},\n   {id: 956, name: 'Dewey Martin'},\n   {id: 313, name: 'Bruce Palmer'},\n   {id: 456, name: 'Stephen Stills'},\n   {id: 177, name: 'Neil Young'}],\n  [177, 456, 999]\n);\n@debug $buffalos; //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]","description":"inner-join"}],"access":"public","require":[{"type":"function","name":"filter"}],"file":{"path":"_inner-join.scss","name":"_inner-join.scss"}},{"description":"\nCombines two lists into a set (i.e. no duplicates) composed of those\nelements common to both lists.\n\n","commentRange":{"start":7,"end":21},"context":{"type":"function","name":"intersection","code":"\n    $lookup: if(length($list1) > length($list2), $list1, $list2);\n    $filtered: if(length($list1) > length($list2), $list2, $list1);\n    $_sass-fire-intersection-array: $filtered !global;\n    $result: compose(uniq, (filter, _sass-fire-intersection-filter), $lookup);\n    @return $result;\n","line":{"start":22,"end":28}},"group":["relation"],"parameter":[{"type":"Array","name":"list1","description":"The first list."},{"type":"Array","name":"list2","description":"The second list."}],"return":{"type":"Array","description":"The list of elements found in both `list1` and `list2`."},"see":[{"description":"Takes a predicate and two lists and returns a list comprising each of\nthe elements of `a` which is equal to one or more\nelements of `b` according to `pred`.\n\n","context":{"type":"function","name":"inner-join","code":"\n    $_sass-fire-inner-join-fn: $pred !global;\n    $_sass-fire-inner-join-list: $b !global;\n    @return filter(_inner-join-filter, $a);\n","line":{"start":32,"end":36}}}],"example":[{"type":"scss","code":"$four-n-three: intersection([1,2,3,4], [7,6,5,4,3]);\n@debug $four-n-three; //=> [4, 3]","description":"intersection"}],"access":"public","require":[{"type":"function","name":"compose"}],"file":{"path":"_intersection.scss","name":"_intersection.scss"}},{"description":"Returns the last element of the given list or string.\n\n","commentRange":{"start":1,"end":16},"context":{"type":"function","name":"last","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, str-length($list), str-length($list));\n    }\n    @return nth($list, length($list));\n","line":{"start":18,"end":23}},"group":["list"],"parameter":[{"type":"List|String","name":"list"}],"return":{"type":"*"},"see":[{"description":"Returns all but the last element of the given list or string.\n\n","context":{"type":"function","name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","line":{"start":20,"end":23}}},{"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","context":{"type":"function","name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","line":{"start":16,"end":22}}},{"description":"Returns all but the first element of the given list or string.\n\n","context":{"type":"function","name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","line":{"start":22,"end":25}}}],"example":[{"type":"scss","code":"$last: last((1 2 3 4 5 6 7 8 9));\n@debug $last; //=> 9\n\n$last: last('hello world');\n@debug $last; //=> 'd'","description":"last"}],"access":"public","require":[],"file":{"path":"_last.scss","name":"_last.scss"},"usedBy":[{"description":"Performs right-to-left function composition. The right most parameter is the input\n\n","context":{"type":"function","name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":22,"end":32}}},{"description":"Performs left-to-right function composition.\n\n","context":{"type":"function","name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":22,"end":31}}},{"description":"The complement of `filter`\n\n","context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":20,"end":22}}},{"description":"Retrieves the values at a given path of an object\n\n","context":{"type":"function","name":"paths","code":"\n    $map: last($args);\n    $paths: init($args);\n    $_sass-fire-paths-map: $map !global;\n\n    @return map(_sass-fire-path, $paths);\n","line":{"start":20,"end":26}}}]},{"description":"\nReturns `true` if the first argument is less than the second;\n`false` otherwise.\n\n","commentRange":{"start":1,"end":16},"context":{"type":"function","name":"lt","code":"\n    @return $a < $b;\n","line":{"start":18,"end":20}},"group":["relation"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Boolean"},"see":[{"description":"\nReturns `true` if the first argument is greater than the second;\n`false` otherwise.\n\n","context":{"type":"function","name":"gt","code":"\n    @return $a > $b;\n","line":{"start":18,"end":20}}}],"example":[{"type":"scss","code":"lt(2, 1); //=> false\nlt(2, 2); //=> false\nlt(2, 3); //=> true","description":"lt"}],"access":"public","require":[],"file":{"path":"_lt.scss","name":"_lt.scss"}},{"description":"\nReturns `true` if the first argument is less than or equal to the second;\n`false` otherwise.\n\n","commentRange":{"start":1,"end":16},"context":{"type":"function","name":"lte","code":"\n    @return $a <= $b;\n","line":{"start":18,"end":20}},"group":["relation"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Boolean"},"see":[{"description":"\nReturns `true` if the first argument is greater than or equal to the second;\n`false` otherwise.\n\n","context":{"type":"function","name":"gte","code":"\n    @return $a >= $b;\n","line":{"start":18,"end":20}}}],"example":[{"type":"scss","code":"lte(2, 1); //=> false\nlte(2, 2); //=> true\nlte(2, 3); //=> true","description":"lte"}],"access":"public","require":[],"file":{"path":"_lte.scss","name":"_lte.scss"}},{"description":"Takes a function and applies the function to each of the functor's values,\nand returns a functor of the same shape.\nsass-fire provides suitable map implementations for List and Map.\n\n","commentRange":{"start":1,"end":19},"context":{"type":"function","name":"map","code":"\n    $accumulator: ();\n\n    @if type-of($list) == 'map' {\n        @each $key, $value in $list {\n            $accumulator: map-merge(\n                $accumulator,\n                (\n                    $key: call(get-function($function), $value),\n                )\n            );\n        }\n    } @else {\n        @for $i from 1 through length($list) {\n            $item: nth($list, $i);\n            $accumulator: append(\n                $accumulator,\n                call(get-function($function), $item)\n            );\n        }\n    }\n    @return $accumulator;\n","line":{"start":21,"end":43}},"group":["list"],"parameter":[{"type":"Function","name":"fn","description":"The function to be called on every element of the input `list`."},{"type":"Array | Object","name":"list","description":"The list to be iterated over."}],"return":{"type":"Array | Object","description":"The new list.\n"},"example":[{"type":"scss","code":"@function double($number) { @return $number * 2; }\n$double-list: map(double, [1 2 3 4 5 6 7 8 9]);\n@debug $double-list; //=> [2 4 6 8 10 12 14 16 18]\n\n@function double($number) { @return $number * 2; }\n$double-obj: map(double, (x: 1, y: 2, z: 3));\n@debug $double-obj; //=> (x: 2, y: 4, z: 6)","description":"map"}],"access":"public","require":[],"file":{"path":"_map.scss","name":"_map.scss"},"usedBy":[{"description":"Retrieves the values at a given path of an object\n\n","context":{"type":"function","name":"paths","code":"\n    $map: last($args);\n    $paths: init($args);\n    $_sass-fire-paths-map: $map !global;\n\n    @return map(_sass-fire-path, $paths);\n","line":{"start":20,"end":26}}}]},{"description":"Returns the mean average of the given list of numbers.\n\n","commentRange":{"start":3,"end":12},"context":{"type":"function","name":"mean","code":"\n    @return sum($list) / length($list);\n","line":{"start":14,"end":16}},"group":["math"],"parameter":[{"type":"List","name":"list"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$mean-average: mean(2, 7, 9);\n@debug $mean-average; //=> 6","description":"mean"}],"access":"public","require":[{"type":"function","name":"sum"}],"file":{"path":"_mean.scss","name":"_mean.scss"},"usedBy":[{"description":"Returns the median average of the given list of numbers.\n\n","context":{"type":"function","name":"median","code":"\n    $length: length($list);\n    $sorted-list: __sort-list-of-numbers($list);\n    $width: 2 - $length % 2;\n    $idx: ($length - $width) / 2;\n    // compensate for list index starting at 1\n    $result: slice($idx + 1, ($idx + $width), $sorted-list);\n\n    @if length($result) == 1 {\n        @return nth($result, 1);\n    } @else {\n        @return mean($result...);\n    }\n","line":{"start":15,"end":28}}}]},{"description":"Returns the median average of the given list of numbers.\n\n","commentRange":{"start":4,"end":13},"context":{"type":"function","name":"median","code":"\n    $length: length($list);\n    $sorted-list: __sort-list-of-numbers($list);\n    $width: 2 - $length % 2;\n    $idx: ($length - $width) / 2;\n    // compensate for list index starting at 1\n    $result: slice($idx + 1, ($idx + $width), $sorted-list);\n\n    @if length($result) == 1 {\n        @return nth($result, 1);\n    } @else {\n        @return mean($result...);\n    }\n","line":{"start":15,"end":28}},"group":["math"],"parameter":[{"type":"List","name":"list"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$median-average: median(12, 5, 17, 1, 7);\n@debug $median-average; //=> 7","description":"median"}],"access":"public","require":[{"type":"function","name":"slice"},{"type":"function","name":"mean"}],"file":{"path":"_median.scss","name":"_median.scss"}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","commentRange":{"start":1,"end":21},"context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":23,"end":25}},"group":["object"],"parameter":[{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge-right","code":"\n    @return merge($l, $r);\n","line":{"start":22,"end":24}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":29,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":25,"end":52}}}],"example":[{"type":"scss","code":"$merge-objs: merge(concat,\n  ( 'name': 'fred', 'age': 10 )\n  ( 'age': 40 )\n);\n@debug $merge-objs; //=> ( 'name': 'fred', 'age': 40 )","description":"merge"}],"access":"public","require":[],"file":{"path":"_merge.scss","name":"_merge.scss"},"usedBy":[{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the first object will be used.\n\n","context":{"type":"function","name":"merge-left","code":"\n    @return merge($r, $l);\n","line":{"start":22,"end":24}}},{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge-right","code":"\n    @return merge($l, $r);\n","line":{"start":22,"end":24}}}]},{"description":"Merges a list of objects together into one object.\n\n","commentRange":{"start":1,"end":14},"context":{"type":"function","name":"merge-all","code":"\n    $result: ();\n    @each $item in $list {\n        $result: map-merge($result, $item);\n    }\n\n    @return $result;\n","line":{"start":16,"end":23}},"group":["list"],"parameter":[{"type":"List","name":"list","description":"array of objects"}],"return":{"type":"Object","description":"the merged object"},"see":[{"description":"Returns a single item by iterating through the list, successively calling\nthe iterator function and passing it an accumulator value and the current\nvalue from the array, and then passing the result to the next call.\n\n","context":{"type":"function","name":"reduce","code":"\n    $accumulator: $acc;\n    @for $i from 1 through length($list) {\n        $accumulator: call(\n            get-function($function),\n            $accumulator,\n            nth($list, $i)\n        );\n    }\n\n    @return $accumulator;\n","line":{"start":17,"end":28}}}],"example":[{"type":"scss","code":"$merge-objs: merge-all((foo: 1), (bar: 2), (baz: 3));\n@debug $merge-objs; //=> (foo: 1, bar: 2, baz: 3)\n\n$override-props: merge-all((foo: 1), (foo: 2), (bar: 2));\n@debug $override-props; //=> (foo: 2, bar: 2)","description":"merge-all"}],"access":"public","require":[],"file":{"path":"_merge-all.scss","name":"_merge-all.scss"}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the first object will be used.\n\n","commentRange":{"start":3,"end":24},"context":{"type":"function","name":"merge-deep-left","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-left-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}},"group":["object"],"parameter":[{"type":"Object","name":"l-obj","description":"left object"},{"type":"Object","name":"r-obj","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":23,"end":25}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":32,"end":39}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":33,"end":40}}}],"example":[{"type":"scss","code":"$merge-objs: merge-deep-left(\n  ( name: 'fred', age: 10, contact: ( email: 'moo@example.com' )),\n  ( age: 40, contact: ( email: 'baa@example.com' ))\n);\n@debug $merge-objs; //=> ( name: 'fred', age: 10, contact: ( email: 'moo@example.com' ))","description":"merge-deep-left"}],"access":"public","require":[{"type":"function","name":"merge-deep-with-key"}],"file":{"path":"_merge-deep-left.scss","name":"_merge-deep-left.scss"}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","commentRange":{"start":3,"end":24},"context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}},"group":["object"],"parameter":[{"type":"Object","name":"l-obj","description":"left object"},{"type":"Object","name":"r-obj","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":23,"end":25}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the first object will be used.\n\n","context":{"type":"function","name":"merge-deep-left","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-left-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":32,"end":39}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":33,"end":40}}}],"example":[{"type":"scss","code":"$merge-objs: merge-deep-right(\n  ( name: 'fred', age: 10, contact: ( email: 'moo@example.com' )),\n  ( age: 40, contact: ( email: 'baa@example.com' ))\n);\n@debug $merge-objs; //=> ( name: 'fred', age: 40, contact: ( email: 'baa@example.com' ))","description":"merge-deep-right"}],"access":"public","require":[{"type":"function","name":"merge-deep-with-key"}],"file":{"path":"_merge-deep-right.scss","name":"_merge-deep-right.scss"}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","commentRange":{"start":6,"end":30},"context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":32,"end":39}},"group":["object"],"parameter":[{"type":"Function","name":"fn","description":"function to call when two keys match"},{"type":"Object","name":"l-obj","description":"left object"},{"type":"Object","name":"r-obj","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":33,"end":40}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":29,"end":32}}}],"example":[{"type":"scss","code":"$merge-objs: merge-deep-with(concat,\n  ( a: true, c: ( thing: 'foo', values: [10, 20] ))\n  ( b: true, c: ( thing: 'bar', values: [15, 35] ))\n);\n@debug $merge-objs; //=> ( a: true, b: true, c: ( thing: 'bar', values: [10, 20, 15, 35] ))","description":"merge-deep-with"}],"access":"public","require":[{"type":"function","name":"merge-deep-with-key"}],"file":{"path":"_merge-deep-with.scss","name":"_merge-deep-with.scss"}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","commentRange":{"start":6,"end":31},"context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":33,"end":40}},"group":["object"],"parameter":[{"type":"Function","name":"fn","description":"function to call when two keys match"},{"type":"Object","name":"l-obj","description":"left object"},{"type":"Object","name":"r-obj","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":25,"end":52}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":32,"end":39}}}],"example":[{"type":"scss","code":"@function concat-values($k, $l, $r) { @return if($k == 'values', concat($l, $r), $r);\n\n$merge-objs: merge-deep-with-key(concatValues,\n  ( a: true, c: ( thing: 'foo', values: [10, 20] ))\n  ( b: true, c: ( thing: 'bar', values: [15, 35] ))\n);\n@debug $merge-objs; //=> ( a: true, b: true, c: ( thing: 'bar', values: [10, 20, 15, 35] ))","description":"merge-deep-with-key"}],"access":"public","require":[{"type":"function","name":"merge-with-key"}],"file":{"path":"_merge-deep-with-key.scss","name":"_merge-deep-with-key.scss"},"usedBy":[{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the first object will be used.\n\n","context":{"type":"function","name":"merge-deep-left","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-left-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":32,"end":39}}}]},{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the first object will be used.\n\n","commentRange":{"start":3,"end":20},"context":{"type":"function","name":"merge-left","code":"\n    @return merge($r, $l);\n","line":{"start":22,"end":24}},"group":["object"],"parameter":[{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge-right","code":"\n    @return merge($l, $r);\n","line":{"start":22,"end":24}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":29,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":25,"end":52}}}],"example":[{"type":"scss","code":"$merge-objs: merge-left((x: 0), (x: 5, y: 2));\n@debug $merge-objs; //=> (x: 0, y: 2);","description":"merge-left"}],"access":"public","require":[{"type":"function","name":"merge"}],"file":{"path":"_merge-left.scss","name":"_merge-left.scss"}},{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","commentRange":{"start":3,"end":20},"context":{"type":"function","name":"merge-right","code":"\n    @return merge($l, $r);\n","line":{"start":22,"end":24}},"group":["object"],"parameter":[{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the first object will be used.\n\n","context":{"type":"function","name":"merge-left","code":"\n    @return merge($r, $l);\n","line":{"start":22,"end":24}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":26,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":29,"end":32}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":25,"end":52}}}],"example":[{"type":"scss","code":"$merge-objs: merge-right((x: 0), (x: 5, y: 2));\n@debug $merge-objs; //=> (x: 5, y: 2);","description":"merge-right"}],"access":"public","require":[{"type":"function","name":"merge"}],"file":{"path":"_merge-right.scss","name":"_merge-right.scss"}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","commentRange":{"start":6,"end":27},"context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":29,"end":32}},"group":["object"],"parameter":[{"type":"Function","name":"fn","description":"function to call when two keys match"},{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":33,"end":40}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":23,"end":25}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":25,"end":52}}}],"example":[{"type":"scss","code":"$merge-objs: merge-with(concat,\n  ( a: true, values: [10, 20] )\n  ( b: true, values: [15, 35] )\n);\n@debug $merge-objs; //=> ( a: true, b: true, values: [10, 20, 15, 35] )","description":"merge-with"}],"access":"public","require":[{"type":"function","name":"merge-with-key"}],"file":{"path":"_merge-with.scss","name":"_merge-with.scss"}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","commentRange":{"start":1,"end":23},"context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":25,"end":52}},"group":["object"],"parameter":[{"type":"Function","name":"fn","description":"function to call when two keys match"},{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":33,"end":40}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":23,"end":25}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":29,"end":32}}}],"example":[{"type":"scss","code":"@function concat-values($k, $l, $r) { @return if($k == 'values', concat($l, $r), $r);\n\n$merge-objs: merge-with-key(concat-values,\n  ( 'a': true, 'thing': 'foo', 'values': [10 20] )\n  ( 'b': true, 'thing': 'bar', 'values': [15 25] )\n);\n@debug $merge-objs; //=> ( a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] )","description":"merge-with-key"}],"access":"public","require":[],"file":{"path":"_merge-with-key.scss","name":"_merge-with-key.scss"},"usedBy":[{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":33,"end":40}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":29,"end":32}}}]},{"description":"Multiplies two values.\n\n","commentRange":{"start":1,"end":11},"context":{"type":"function","name":"multiply","code":"\n    @return $a * $b;\n","line":{"start":13,"end":15}},"group":["math"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$multiply-numbers: multiply(10, 2);\n@debug $multiply-numbers; //=> 20","description":"multiply"}],"access":"public","require":[],"file":{"path":"_multiply.scss","name":"_multiply.scss"}},{"description":"Negates its argument.\n\n","commentRange":{"start":1,"end":10},"context":{"type":"function","name":"negate","code":"\n    @return -$n;\n","line":{"start":12,"end":14}},"group":["math"],"parameter":[{"type":"Number","name":"n"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$negate-numbers: negate(40);\n@debug $negate-numbers; //=> -40","description":"negate"}],"access":"public","require":[],"file":{"path":"_negate.scss","name":"_negate.scss"}},{"description":"Returns a partial copy of an object omitting the specified keys\n\n","commentRange":{"start":1,"end":11},"context":{"type":"function","name":"omit","code":"\n    $result: ();\n    $index: ();\n    $idx: 1;\n    $length: length($keys);\n\n    @while $idx <= $length {\n        $index: map-merge($index, (#{nth($keys, $idx)}: 1));\n        $idx: $idx + 1;\n    }\n\n    @each $prop, $val in $map {\n        @if not map-has-key($index, $prop) {\n            $result: map-merge($result, (#{$prop}: $val));\n        }\n    }\n\n    @return $result;\n","line":{"start":13,"end":31}},"group":["object"],"parameter":[{"type":"List","name":"keys","description":"keys to remove from the map"},{"type":"Map","name":"map","description":"the map to copy from"}],"return":{"type":"Map","description":"A new map without the properties from $keys.\n"},"example":[{"type":"scss","code":"$map-omit: omit((tom, harry), (tom: 1, dick: 2, harry: 3));\n@debug $map-omit; //=> (dick: 2)","description":"omit"}],"access":"public","require":[],"file":{"path":"_omit.scss","name":"_omit.scss"},"usedBy":[{"description":"Returns a new object that does not contain a `prop` property.\n\n","context":{"type":"function","name":"dissoc","code":"\n    @return omit(($prop), $obj);\n","line":{"start":18,"end":20}}}]},{"description":"Takes a predicate and a list and returns a pair of filterable lists of the same type of\nelements which do and do not satisfy, the predicate, respectively.\n\n","commentRange":{"start":1,"end":17},"context":{"type":"function","name":"partition","code":"\n    $satisfy: ();\n    $dissatisfy: ();\n    @each $item in $filterable {\n        $truthy: call(get-function($pred), $item);\n        @if $truthy {\n            $satisfy: append($satisfy, $item);\n        } @else {\n            $dissatisfy: append($dissatisfy, $item);\n        }\n    }\n    @return ($satisfy, $dissatisfy);\n","line":{"start":19,"end":31}},"group":["list"],"parameter":[{"type":"Function","name":"pred","description":"A predicate to determine which side the element belongs to."},{"type":"Array","name":"filterable","description":"the list to partition."}],"return":{"type":"Array","description":"An array, containing first the subset of elements that satisfy the\n predicate, and second the subset of elements that do not satisfy."},"see":[{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":22,"end":24}}},{"description":"The complement of `filter`\n\n","context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":20,"end":22}}}],"example":[{"type":"scss","code":"@function is-even($n) { @return $n % 2 == 0; }\n\n$even-n-odd: partition(is-even, (1, 2, 3, 4));\n@debug $even-n-odd; //=> ((2 4), (1 3))","description":"partition"}],"access":"public","require":[],"file":{"path":"_partition.scss","name":"_partition.scss"},"usedBy":[{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":22,"end":24}}},{"description":"The complement of `filter`\n\n","context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":20,"end":22}}}]},{"description":"Retrieves the value at a given path of an object\n\n","commentRange":{"start":4,"end":14},"context":{"type":"function","name":"path","code":"\n    @return head(paths($path, $map));\n","line":{"start":16,"end":18}},"group":["object"],"parameter":[{"type":"List","name":"path","description":"The path to use."},{"type":"Object","name":"map","description":"The map to retrieve the nested property from."}],"return":{"type":"*","description":"The data at `path` of the supplied object or null.\n"},"example":[{"type":"scss","code":"$get-value: path(('a', 'b'), (a: (b: 2)));\n@debug $get-value; //=> 2","description":"path"}],"access":"public","require":[{"type":"function","name":"head"},{"type":"function","name":"paths"}],"file":{"path":"_path.scss","name":"_path.scss"},"usedBy":[{"description":"Returns `true` if the specified object property at given path satisfies the\ngiven predicate; `false` otherwise.\n\n","context":{"type":"function","name":"path-satisfies","code":"\n    $value: path($path, $map);\n    @return if($value, call(get-function($pred), $value), false);\n","line":{"start":18,"end":21}}},{"description":"If the given, non-null object has a value at the given path, returns the\nvalue at that path. Otherwise returns the provided default value.\n\n","context":{"type":"function","name":"path-or","code":"\n    $value: path($path, $map);\n    @return if($value, $value, $d);\n","line":{"start":17,"end":20}}},{"description":"Determines whether a nested path on an object has a specific value.\nMost likely used to filter a list.\n\n","context":{"type":"function","name":"path-eq","code":"\n    @return equals(path($path, $map), $value);\n","line":{"start":18,"end":20}}}]},{"description":"Determines whether a nested path on an object has a specific value.\nMost likely used to filter a list.\n\n","commentRange":{"start":4,"end":16},"context":{"type":"function","name":"path-eq","code":"\n    @return equals(path($path, $map), $value);\n","line":{"start":18,"end":20}},"group":["relation"],"parameter":[{"type":"List","name":"path","description":"The path to use."},{"type":"*","name":"value","description":"The value to compare."},{"type":"Object","name":"map","description":"The map to retrieve the nested property from."}],"return":{"type":"*","description":"The data at `path` of the supplied object or the default value.\n"},"example":[{"type":"scss","code":"$is-42: path-eq(('x', 'y'), 42, (x: (y: 42)));\n@debug $is-42; //=> true","description":"path-eq"}],"access":"public","require":[{"type":"function","name":"equals"},{"type":"function","name":"path"}],"file":{"path":"_path-eq.scss","name":"_path-eq.scss"}},{"description":"If the given, non-null object has a value at the given path, returns the\nvalue at that path. Otherwise returns the provided default value.\n\n","commentRange":{"start":3,"end":15},"context":{"type":"function","name":"path-or","code":"\n    $value: path($path, $map);\n    @return if($value, $value, $d);\n","line":{"start":17,"end":20}},"group":["object"],"parameter":[{"type":"*","name":"d","description":"The default value."},{"type":"List","name":"path","description":"The path to use."},{"type":"Object","name":"map","description":"The map to retrieve the nested property from."}],"return":{"type":"*","description":"The data at `path` of the supplied object or the default value.\n"},"example":[{"type":"scss","code":"$get-default: path-or('N/A', ('x', 'y'), (a: (b: 2)));\n@debug $get-value; //=> \"N/A\"","description":"path-or"}],"access":"public","require":[{"type":"function","name":"path"}],"file":{"path":"_path-or.scss","name":"_path-or.scss"}},{"description":"Returns `true` if the specified object property at given path satisfies the\ngiven predicate; `false` otherwise.\n\n","commentRange":{"start":3,"end":16},"context":{"type":"function","name":"path-satisfies","code":"\n    $value: path($path, $map);\n    @return if($value, call(get-function($pred), $value), false);\n","line":{"start":18,"end":21}},"group":["logic"],"parameter":[{"type":"Function","name":"pred"},{"type":"List","name":"path","description":"The path to use."},{"type":"Object","name":"map","description":"The map to retrieve the nested property from."}],"return":{"type":"*","description":"The data at `path` of the supplied object or null.\n"},"example":[{"type":"scss","code":"@function is-positive($n) { @return $n > 0; }\n$value-is-pos: path-satisfies(is-positive, ('a', 'b'), (a: (b: 2)));\n@debug $value-is-pos; //=> true","description":"path"}],"access":"public","require":[{"type":"function","name":"path"}],"file":{"path":"_path-satisfies.scss","name":"_path-satisfies.scss"}},{"description":"Retrieves the values at a given path of an object\n\n","commentRange":{"start":8,"end":18},"context":{"type":"function","name":"paths","code":"\n    $map: last($args);\n    $paths: init($args);\n    $_sass-fire-paths-map: $map !global;\n\n    @return map(_sass-fire-path, $paths);\n","line":{"start":20,"end":26}},"group":["object"],"parameter":[{"type":"List","name":"paths-array","description":"The array of paths to be fetched."},{"type":"Object","name":"map","description":"The map to retrieve the nested properties from."}],"return":{"type":"*","description":"A list consisting of values at paths specified by \"paths-array\".\n"},"example":[{"type":"scss","code":"$get-values: paths(('a', 'b'), ('p', 0, 'q'), (a: (b: 2), p: ((q: 3))));\n@debug $get-values; //=> (2, 3)","description":"paths"}],"access":"public","require":[{"type":"function","name":"last"},{"type":"function","name":"init"},{"type":"function","name":"map"}],"file":{"path":"_paths.scss","name":"_paths.scss"},"usedBy":[{"description":"Retrieves the value at a given path of an object\n\n","context":{"type":"function","name":"path","code":"\n    @return head(paths($path, $map));\n","line":{"start":16,"end":18}}}]},{"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","commentRange":{"start":3,"end":16},"context":{"type":"function","name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":18,"end":29}},"group":["object"],"parameter":[{"type":"Array","name":"names","description":"an array of String property names to copy onto a new object"},{"type":"Object","name":"obj","description":"The object to copy from"}],"return":{"type":"Object","description":"A new object with only properties from `names` on it."},"see":[{"description":"Returns a partial copy of an object omitting the specified keys\n\n","context":{"type":"function","name":"omit","code":"\n    $result: ();\n    $index: ();\n    $idx: 1;\n    $length: length($keys);\n\n    @while $idx <= $length {\n        $index: map-merge($index, (#{nth($keys, $idx)}: 1));\n        $idx: $idx + 1;\n    }\n\n    @each $prop, $val in $map {\n        @if not map-has-key($index, $prop) {\n            $result: map-merge($result, (#{$prop}: $val));\n        }\n    }\n\n    @return $result;\n","line":{"start":13,"end":31}}},{"description":"Acts as multiple `prop`: array of keys in, array of values out.\n\n","context":{"type":"function","name":"props","code":"\n    $length: length($names);\n    $result: ();\n    $idx: 1;\n    // TODO: use pick and map-values instead of while.\n    @while ($idx <= $length) {\n        $key: nth($names, $idx);\n        @if (map-has-key($obj, $key)) {\n            $result: append($result, map-get($obj, $key), 'comma');\n        } @else {\n            $result: append($result, false, 'comma');\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":15,"end":30}}}],"example":[{"type":"scss","code":"$picky: pick(a d, ( a: 1, b: 2, c: 3, d: 4 ));\n@debug $picky; //=> (a: 1, d: 4)","description":"pick"}],"access":"public","require":[{"type":"function","name":"inc"}],"file":{"path":"_pick.scss","name":"_pick.scss"}},{"description":"Performs left-to-right function composition.\n\n","commentRange":{"start":6,"end":20},"context":{"type":"function","name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":22,"end":31}},"group":["function"],"parameter":[{"type":"Function...","name":"functions...","description":"The functions to compose"}],"return":{"type":"Function"},"see":[{"description":"Performs right-to-left function composition. The right most parameter is the input\n\n","context":{"type":"function","name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":22,"end":32}}}],"example":[{"type":"scss","code":"$input: ('a', 'b', 'c');\n$output: pipe(\n  (join, ('d', 'e')),\n  (implode, '-'),\n  $input);\n@debug $output; //=> 'd-e-a-b-c'","description":"pipe"}],"access":"public","require":[{"type":"function","name":"init"},{"type":"function","name":"last"}],"file":{"path":"_pipe.scss","name":"_pipe.scss"}},{"description":"Multiplies together all the elements of a list.\n\n","commentRange":{"start":4,"end":13},"context":{"type":"function","name":"product","code":"\n    @return reduce(multiply, 1, $list);\n","line":{"start":15,"end":17}},"group":["math"],"parameter":[{"type":"Array","name":"list","description":"An array of numbers"}],"return":{"type":"Number","description":"The product of all the numbers in the list.\n"},"example":[{"type":"scss","code":"$multipy-list: product(2, 4, 6, 8, 100, 2);\n@debug $multipy-list; //=> 76800","description":"product"}],"access":"public","require":[{"type":"function","name":"reduce"}],"file":{"path":"_product.scss","name":"_product.scss"}},{"description":"Acts as multiple `prop`: array of keys in, array of values out.\n\n","commentRange":{"start":3,"end":13},"context":{"type":"function","name":"props","code":"\n    $length: length($names);\n    $result: ();\n    $idx: 1;\n    // TODO: use pick and map-values instead of while.\n    @while ($idx <= $length) {\n        $key: nth($names, $idx);\n        @if (map-has-key($obj, $key)) {\n            $result: append($result, map-get($obj, $key), 'comma');\n        } @else {\n            $result: append($result, false, 'comma');\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":15,"end":30}},"group":["object"],"parameter":[{"type":"Array","name":"names","description":"The property names to fetch"},{"type":"Object","name":"obj","description":"The object to query"}],"return":{"type":"Array","description":"The corresponding values\n"},"example":[{"type":"scss","code":"$list-of-values-plz: props(a d, ( a: 1, b: 2, c: 3, d: 4 ));\n@debug $list-of-values-plz; //=> (1, 4)","description":"props"}],"access":"public","require":[{"type":"function","name":"inc"}],"file":{"path":"_props.scss","name":"_props.scss"}},{"description":"Returns a single item by iterating through the list, successively calling\nthe iterator function and passing it an accumulator value and the current\nvalue from the array, and then passing the result to the next call.\n\n","commentRange":{"start":1,"end":15},"context":{"type":"function","name":"reduce","code":"\n    $accumulator: $acc;\n    @for $i from 1 through length($list) {\n        $accumulator: call(\n            get-function($function),\n            $accumulator,\n            nth($list, $i)\n        );\n    }\n\n    @return $accumulator;\n","line":{"start":17,"end":28}},"group":["list"],"parameter":[{"type":"Function","name":"fn","description":"The iterator function. Receives two values, the accumulator and the\ncurrent element from the array."},{"type":"*","name":"acc","description":"The accumulator value."},{"type":"Array","name":"list","description":"The list to iterate over."}],"return":{"type":"*","description":"The final, accumulated value.\n"},"example":[{"type":"scss","code":"$sum-of-numbers-plz: reduce(add, 0, (1 2 3 4 5 6 7 8 9));\n@debug $sum-of-numbers-plz; //=> 45","description":"reduce"}],"access":"public","require":[],"file":{"path":"_reduce.scss","name":"_reduce.scss"},"usedBy":[{"description":"\nReturns a new list containing only one copy of each element in the original\nlist.\n\n","context":{"type":"function","name":"uniq","code":"\n    $result: ();\n\n    @if type-of($list) == arglist and length(nth($list, 1)) == 0 {\n        @return $result;\n    }\n\n    $_list: if(\n        type-of($list) == arglist and length($list) == 1,\n        reduce(append, (), nth($list, 1)),\n        $list\n    );\n    @each $item in $_list {\n        // should probably test with `get-function` for functions.\n        @if not index($result, $item) {\n            $result: append($result, $item);\n        }\n    }\n\n    @return $result;\n","line":{"start":17,"end":37}}},{"description":"Multiplies together all the elements of a list.\n\n","context":{"type":"function","name":"product","code":"\n    @return reduce(multiply, 1, $list);\n","line":{"start":15,"end":17}}},{"description":"Adds a list of numbers together.\n\n","context":{"type":"function","name":"sum","code":"\n    @return reduce(add, 0, $list);\n","line":{"start":15,"end":17}}}]},{"description":"The complement of `filter`\n\n","commentRange":{"start":4,"end":18},"context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":20,"end":22}},"group":["list"],"parameter":[{"type":"Function","name":"pred"},{"type":"Array","name":"filterable"}],"return":{"type":"Array"},"see":[{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":22,"end":24}}}],"example":[{"type":"scss","code":"@function isEven($n) {\n  @return $n % 2 == 0;\n}\n$only-odd-plz: reject(isEven, (1, 2, 3, 4));\n@debug $only-odd-plz; //=> (1 3)","description":"reject"}],"access":"public","require":[{"type":"function","name":"last"},{"type":"function","name":"partition"}],"file":{"path":"_reject.scss","name":"_reject.scss"}},{"description":"Returns the elements of the given list or string\nfrom `fromIndex` to `toIndex`.\n\n","commentRange":{"start":1,"end":18},"context":{"type":"function","name":"slice","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, $from-index, $to-index);\n    }\n\n    $result: ();\n    @for $i from $from-index through $to-index {\n        $result: append($result, nth($list, $i));\n    }\n    @return $result;\n","line":{"start":20,"end":30}},"group":["list"],"parameter":[{"type":"Number","name":"fromIndex","description":"The start index."},{"type":"Number","name":"toIndex","description":"The end index."},{"type":"*","name":"list"}],"return":{"type":"*"},"example":[{"type":"scss","code":"$sliced: slice(5, 9, (1 2 3 4 5 6 7 8 9));\n@debug $sliced; //=> (5 6 7 8 9)","description":"slice-array"},{"type":"scss","code":"$sliced: slice(1, 4, 'hello world');\n@debug $sliced; //=> 'hell'","description":"slice-string"}],"access":"public","require":[],"file":{"path":"_slice.scss","name":"_slice.scss"},"usedBy":[{"description":"Returns all but the last element of the given list or string.\n\n","context":{"type":"function","name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","line":{"start":20,"end":23}}},{"description":"Returns all but the first element of the given list or string.\n\n","context":{"type":"function","name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","line":{"start":22,"end":25}}},{"description":"Returns the median average of the given list of numbers.\n\n","context":{"type":"function","name":"median","code":"\n    $length: length($list);\n    $sorted-list: __sort-list-of-numbers($list);\n    $width: 2 - $length % 2;\n    $idx: ($length - $width) / 2;\n    // compensate for list index starting at 1\n    $result: slice($idx + 1, ($idx + $width), $sorted-list);\n\n    @if length($result) == 1 {\n        @return nth($result, 1);\n    } @else {\n        @return mean($result...);\n    }\n","line":{"start":15,"end":28}}}]},{"description":"Splits a string into an array of strings based on the given\nseparator.\n\n","commentRange":{"start":1,"end":13},"context":{"type":"function","name":"split","code":"\n    $delimiter-length: str-length($sep);\n    $idx: str-index($str, $sep);\n    $result: ();\n    @while $idx != null {\n        $result: append($result, str-slice($str, 1, $idx - 1), 'comma');\n        $str: str-slice($str, $idx + $delimiter-length);\n        $idx: str-index($str, $sep);\n    }\n    @return append($result, $str);\n","line":{"start":15,"end":25}},"group":["string"],"parameter":[{"type":"String","name":"sep","description":"The pattern."},{"type":"String","name":"str","description":"The string to separate into an array."}],"return":{"type":"Array","description":"The array of strings from `str` separated by `str`."},"see":[{"description":"Returns a string made by inserting the `separator` between each element and\nconcatenating all the elements into a single string. Ramda defines this as\njoin but sass has it's own join method.\n\n","context":{"type":"function","name":"implode","code":"\n    $result: '';\n    @for $i from 1 through length($xs) {\n        $delimiter: if($i != 1, quote($separator), '');\n        $item: #{$delimiter + nth($xs, $i)};\n        $result: #{$result + $item};\n    }\n\n    @return $result;\n","line":{"start":15,"end":24}}}],"example":[{"type":"scss","code":"$splitted: split('-', 'a-b-c-d-e-f-g');\n@debug $splitted; //=> ('a', 'b', 'c', 'd', 'e', 'f', 'g')","description":"split"}],"access":"public","require":[],"file":{"path":"_split.scss","name":"_split.scss"},"usedBy":[{"description":"Removes (strips) whitespace from both ends of the string.\n\n","context":{"type":"function","name":"trim","code":"\n    $result: split(' ', $str);\n    @return implode($xs: $result);\n","line":{"start":14,"end":17}}}]},{"description":"Subtract two values.\n\n","commentRange":{"start":1,"end":11},"context":{"type":"function","name":"subtract","code":"\n    @return $a - $b;\n","line":{"start":13,"end":15}},"group":["math"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$subtract-numbers: subtract(10, 20);\n@debug $subtract-numbers; //=> 10","description":"subtract"}],"access":"public","require":[],"file":{"path":"_subtract.scss","name":"_subtract.scss"},"usedBy":[{"description":"Deincrements its argument.\n\n","context":{"type":"function","name":"dec","code":"\n    @return subtract($n, 1);\n","line":{"start":15,"end":17}}}]},{"description":"Adds a list of numbers together.\n\n","commentRange":{"start":4,"end":13},"context":{"type":"function","name":"sum","code":"\n    @return reduce(add, 0, $list);\n","line":{"start":15,"end":17}},"group":["math"],"parameter":[{"type":"List","name":"list"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$add-list: sum((10, 20, 30, 40, 50, 60, 70, 80, 90))\n@debug $add-list; //=> 450","description":"sum"}],"access":"public","require":[{"type":"function","name":"reduce"}],"file":{"path":"_sum.scss","name":"_sum.scss"},"usedBy":[{"description":"Returns the mean average of the given list of numbers.\n\n","context":{"type":"function","name":"mean","code":"\n    @return sum($list) / length($list);\n","line":{"start":14,"end":16}}}]},{"description":"A function that always returns `true`.\nAny passed in parameters are ignored.\n\n","commentRange":{"start":1,"end":10},"context":{"type":"function","name":"T","code":"\n    @return true;\n","line":{"start":12,"end":14}},"group":["function"],"return":{"type":"bool","description":"true\n"},"example":[{"type":"scss","code":"$so-true: T();\n@debug $so-true; //=> true","description":"F"}],"access":"public","file":{"path":"_T.scss","name":"_T.scss"}},{"description":"Returns all but the first element of the given list or string.\n\n","commentRange":{"start":3,"end":20},"context":{"type":"function","name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","line":{"start":22,"end":25}},"group":["list"],"parameter":[{"type":"*","name":"list"}],"return":{"type":"*"},"see":[{"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","context":{"type":"function","name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","line":{"start":16,"end":22}}},{"description":"Returns all but the last element of the given list or string.\n\n","context":{"type":"function","name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","line":{"start":20,"end":23}}},{"description":"Returns the last element of the given list or string.\n\n","context":{"type":"function","name":"last","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, str-length($list), str-length($list));\n    }\n    @return nth($list, length($list));\n","line":{"start":18,"end":23}}}],"example":[{"type":"scss","code":"$without-first: tail((1 2 3 4 5 6 7 8 9));\n@debug $without-first; //=> (2 3 4 5 6 7 8 9)","description":"tail-array"},{"type":"scss","code":"$without-first: tail('hello world');\n@debug $without-first; //=> 'ello world'","description":"tail-string"}],"access":"public","require":[{"type":"function","name":"slice"}],"file":{"path":"_tail.scss","name":"_tail.scss"}},{"description":"Removes (strips) whitespace from both ends of the string.\n\n","commentRange":{"start":3,"end":12},"context":{"type":"function","name":"trim","code":"\n    $result: split(' ', $str);\n    @return implode($xs: $result);\n","line":{"start":14,"end":17}},"group":["string"],"parameter":[{"type":"String","name":"str","description":"The string to trim."}],"return":{"type":"String","description":"Trimmed version of `str`.\n"},"example":[{"type":"scss","code":"$trimmed: trim('   the donkey jumped over the lazy snake    ');\n@debug $trimmed; //=> 'thedonkeyjumpedoverthelazysnake'","description":"trim"}],"access":"public","require":[{"type":"function","name":"split"},{"type":"function","name":"implode"}],"file":{"path":"_trim.scss","name":"_trim.scss"}},{"description":"\nReturns a new list containing only one copy of each element in the original\nlist.\n\n","commentRange":{"start":3,"end":15},"context":{"type":"function","name":"uniq","code":"\n    $result: ();\n\n    @if type-of($list) == arglist and length(nth($list, 1)) == 0 {\n        @return $result;\n    }\n\n    $_list: if(\n        type-of($list) == arglist and length($list) == 1,\n        reduce(append, (), nth($list, 1)),\n        $list\n    );\n    @each $item in $_list {\n        // should probably test with `get-function` for functions.\n        @if not index($result, $item) {\n            $result: append($result, $item);\n        }\n    }\n\n    @return $result;\n","line":{"start":17,"end":37}},"group":["list"],"parameter":[{"type":"Array","name":"list","description":"The array to consider."}],"return":{"type":"Array","description":"The list of unique items."},"example":[{"type":"scss","code":"uniq([1, 1, 2, 1]); //=> [1, 2]\nuniq([1, '1']);     //=> [1, '1']\nuniq([[42], [42]]); //=> [[42]]","description":"uniq"}],"access":"public","require":[{"type":"function","name":"reduce"}],"file":{"path":"_uniq.scss","name":"_uniq.scss"}},{"description":"Returns a new list without values in the first argument.\n`equals` is used to determine equality.\n\n","commentRange":{"start":1,"end":12},"context":{"type":"function","name":"without","code":"\n    $result: [];\n    @each $item in $list2 {\n        @if not index($list1, $item) {\n            $result: append($result, $item, 'comma');\n        }\n    }\n    @return $result;\n","line":{"start":14,"end":22}},"group":["list"],"parameter":[{"type":"Array","name":"list1","description":"The values to be removed from `list2`."},{"type":"Array","name":"list2","description":"The array to remove values from."}],"return":{"type":"Array","description":"The new array without values in `list1`.\n"},"example":[{"type":"scss","code":"$without-one-two: without([1, 2], [1, 2, 1, 4, 5]);\n@debug $without-one-two; //=> [4, 5]","description":"without"}],"access":"public","require":[],"file":{"path":"_without.scss","name":"_without.scss"}}]}