[{"description":"A function that always returns `false`.\nAny passed in parameters are ignored.\n\n","commentRange":{"start":1,"end":5},"context":{"type":"function","name":"F","code":"\n    @return false;\n","line":{"start":7,"end":9}},"group":["function"],"return":{"type":"bool","description":"false"},"access":"public","file":{"path":"_F.scss","name":"_F.scss"}},{"description":"A function that always returns `true`.\nAny passed in parameters are ignored.\n\n","commentRange":{"start":1,"end":5},"context":{"type":"function","name":"T","code":"\n    @return true;\n","line":{"start":7,"end":9}},"group":["function"],"return":{"type":"bool","description":"true"},"access":"public","file":{"path":"_T.scss","name":"_T.scss"}},{"description":"Performs right-to-left function composition.\n\n","commentRange":{"start":6,"end":11},"context":{"type":"function","name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":13,"end":23}},"group":["function"],"parameter":[{"type":"Function...","name":"functions...","description":"The functions to compose"}],"return":{"type":"Function"},"see":[{"description":"Performs left-to-right function composition.\n\n","context":{"type":"function","name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":13,"end":22}}}],"access":"public","require":[{"type":"function","name":"init"},{"type":"function","name":"last"}],"file":{"path":"_compose.scss","name":"_compose.scss"}},{"description":"Performs left-to-right function composition.\n\n","commentRange":{"start":6,"end":11},"context":{"type":"function","name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":13,"end":22}},"group":["function"],"parameter":[{"type":"Function...","name":"functions...","description":"The functions to compose"}],"return":{"type":"Function"},"see":[{"description":"Performs right-to-left function composition.\n\n","context":{"type":"function","name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":13,"end":23}}}],"access":"public","require":[{"type":"function","name":"init"},{"type":"function","name":"last"}],"file":{"path":"_pipe.scss","name":"_pipe.scss"}},{"description":"Returns the result of concatenating the given lists or strings.\n\n","commentRange":{"start":1,"end":7},"context":{"type":"function","name":"concat","code":"\n    @if type-of($a) == 'list' and type-of($b) == 'list' {\n        @return join($a, $b);\n    }\n    @if type-of($a) == 'string' and type-of($b) == 'string' {\n        @return #{$a}#{$b};\n    }\n","line":{"start":9,"end":16}},"group":["list"],"parameter":[{"type":"Array|String","name":"a","description":"The first list"},{"type":"Array|String","name":"b","description":"The second list"}],"return":{"type":"Array|String","description":"A list consisting of the elements of `firstList`\nfollowed by the elements of `secondList`."},"access":"public","require":[],"file":{"path":"_concat.scss","name":"_concat.scss"}},{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","commentRange":{"start":4,"end":12},"context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":14,"end":16}},"group":["list"],"parameter":[{"type":"Function","name":"pred"},{"type":"Array","name":"filterable"}],"return":{"type":"Array","description":"Filterable"},"see":[{"description":"The complement of `filter`\n\n","context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":12,"end":14}}}],"access":"public","require":[{"type":"function","name":"head"},{"type":"function","name":"partition"}],"file":{"path":"_filter.scss","name":"_filter.scss"}},{"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","commentRange":{"start":1,"end":6},"context":{"type":"function","name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","line":{"start":8,"end":14}},"group":["list"],"parameter":[{"type":"Array|String","name":"list"}],"return":{"type":"*"},"access":"public","require":[],"file":{"path":"_head.scss","name":"_head.scss"},"usedBy":[{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":14,"end":16}}}]},{"description":"Returns a string made by inserting the `separator` between each element and\nconcatenating all the elements into a single string. Ramda defines this as\njoin but sass has it's own join method.\n\n","commentRange":{"start":1,"end":8},"context":{"type":"function","name":"implode","code":"\n    $result: '';\n    @for $i from 1 through length($xs) {\n        $delimiter: if($i != 1, quote($separator), '');\n        $item: #{$delimiter + nth($xs, $i)};\n        $result: #{$result + $item};\n    }\n\n    @return $result;\n","line":{"start":10,"end":19}},"group":["list"],"parameter":[{"type":"Number|String","name":"separator","description":"The string used to separate the elements."},{"type":"Array","name":"xs","description":"The elements to join into a string."}],"return":{"type":"String","description":"str The string made by concatenating `xs` with `separator`."},"access":"public","require":[],"file":{"path":"_implode.scss","name":"_implode.scss"},"usedBy":[{"description":"Removes (strips) whitespace from both ends of the string.\n\n","context":{"type":"function","name":"trim","code":"\n    $result: split(' ', $str);\n    @return implode($xs: $result);\n","line":{"start":9,"end":12}}}]},{"description":"Returns all but the last element of the given list or string.\n\n","commentRange":{"start":3,"end":10},"context":{"type":"function","name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","line":{"start":12,"end":15}},"group":["list"],"parameter":[{"type":"List|String","name":"list"}],"return":{"type":"*"},"see":[{"description":"Returns the last element of the given list or string.\n\n","context":{"type":"function","name":"last","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, str-length($list), str-length($list));\n    }\n    @return nth($list, length($list));\n","line":{"start":10,"end":15}}},{"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","context":{"type":"function","name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","line":{"start":8,"end":14}}},{"description":"Returns all but the first element of the given list or string.\n\n","context":{"type":"function","name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","line":{"start":12,"end":15}}}],"access":"public","require":[{"type":"function","name":"slice"}],"file":{"path":"_init.scss","name":"_init.scss"},"usedBy":[{"description":"Performs right-to-left function composition.\n\n","context":{"type":"function","name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":13,"end":23}}},{"description":"Performs left-to-right function composition.\n\n","context":{"type":"function","name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":13,"end":22}}}]},{"description":"Returns the last element of the given list or string.\n\n","commentRange":{"start":1,"end":8},"context":{"type":"function","name":"last","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, str-length($list), str-length($list));\n    }\n    @return nth($list, length($list));\n","line":{"start":10,"end":15}},"group":["list"],"parameter":[{"type":"List|String","name":"list"}],"return":{"type":"*"},"see":[{"description":"Returns all but the last element of the given list or string.\n\n","context":{"type":"function","name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","line":{"start":12,"end":15}}},{"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","context":{"type":"function","name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","line":{"start":8,"end":14}}},{"description":"Returns all but the first element of the given list or string.\n\n","context":{"type":"function","name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","line":{"start":12,"end":15}}}],"access":"public","require":[],"file":{"path":"_last.scss","name":"_last.scss"},"usedBy":[{"description":"Performs right-to-left function composition.\n\n","context":{"type":"function","name":"compose","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @for $i from length($function-list) * -1 through -1 {\n        $function: nth($function-list, abs($i));\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":13,"end":23}}},{"description":"Performs left-to-right function composition.\n\n","context":{"type":"function","name":"pipe","code":"\n    $function-list: init($params);\n    $result: last($params);\n\n    @each $function in $function-list {\n        $result: _run-function-with-params($function, $result);\n    }\n\n    @return $result;\n","line":{"start":13,"end":22}}},{"description":"The complement of `filter`\n\n","context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":12,"end":14}}}]},{"description":"Takes a function and\na [functor](https://github.com/fantasyland/fantasy-land#functor),\napplies the function to each of the functor's values, and returns\na functor of the same shape.\n\n","commentRange":{"start":1,"end":9},"context":{"type":"function","name":"map","code":"\n    $accumulator: ();\n\n    @if type-of($list) == 'map' {\n        @each $key, $value in $list {\n            $accumulator: map-merge(\n                $accumulator,\n                (\n                    $key: call(get-function($function), $value)\n                )\n            );\n        }\n    } @else {\n        @for $i from 1 through length($list) {\n            $item: nth($list, $i);\n            $accumulator: append(\n                $accumulator,\n                call(get-function($function), $item)\n            );\n        }\n    }\n    @return $accumulator;\n","line":{"start":11,"end":33}},"group":["list"],"parameter":[{"type":"Function","name":"fn","description":"The function to be called on every element of the input `list`."},{"type":"Array","name":"list","description":"The list to be iterated over."}],"return":{"type":"Array","description":"The new list."},"access":"public","require":[],"file":{"path":"_map.scss","name":"_map.scss"}},{"description":"Merges a list of objects together into one object.\n\n","commentRange":{"start":1,"end":6},"context":{"type":"function","name":"merge-all","code":"\n    $result: ();\n    @each $item in $list {\n        $result: map-merge($result, $item);\n    }\n\n    @return $result;\n","line":{"start":8,"end":15}},"group":["list"],"parameter":[{"type":"List","name":"list","description":"array of objects"}],"return":{"type":"Object","description":"the merged object"},"see":[{"description":"Returns a single item by iterating through the list, successively calling\nthe iterator function and passing it an accumulator value and the current\nvalue from the array, and then passing the result to the next call.\n\n","context":{"type":"function","name":"reduce","code":"\n    $accumulator: $acc;\n    @for $i from 1 through length($list) {\n        $accumulator: call(\n            get-function($function),\n            $accumulator,\n            nth($list, $i)\n        );\n    }\n\n    @return $accumulator;\n","line":{"start":12,"end":23}}}],"access":"public","require":[],"file":{"path":"_merge-all.scss","name":"_merge-all.scss"}},{"description":"Takes a predicate and a list and returns a pair of filterable lists of the same type of\nelements which do and do not satisfy, the predicate, respectively.\n\n","commentRange":{"start":1,"end":10},"context":{"type":"function","name":"partition","code":"\n    $satisfy: ();\n    $dissatisfy: ();\n    @each $item in $filterable {\n        $truthy: if(call(get-function($pred), $item), true, false);\n        @if $truthy {\n            $satisfy: append($satisfy, $item);\n        } @else {\n            $dissatisfy: append($dissatisfy, $item);\n        }\n    }\n    @return ($satisfy, $dissatisfy);\n","line":{"start":12,"end":24}},"group":["list"],"parameter":[{"type":"Function","name":"pred","description":"A predicate to determine which side the element belongs to."},{"type":"Array","name":"filterable","description":"the list to partition."}],"return":{"type":"Array","description":"An array, containing first the subset of elements that satisfy the\n predicate, and second the subset of elements that do not satisfy."},"see":[{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":14,"end":16}}},{"description":"The complement of `filter`\n\n","context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":12,"end":14}}}],"access":"public","require":[],"file":{"path":"_partition.scss","name":"_partition.scss"},"usedBy":[{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":14,"end":16}}},{"description":"The complement of `filter`\n\n","context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":12,"end":14}}}]},{"description":"Returns a single item by iterating through the list, successively calling\nthe iterator function and passing it an accumulator value and the current\nvalue from the array, and then passing the result to the next call.\n\n","commentRange":{"start":1,"end":10},"context":{"type":"function","name":"reduce","code":"\n    $accumulator: $acc;\n    @for $i from 1 through length($list) {\n        $accumulator: call(\n            get-function($function),\n            $accumulator,\n            nth($list, $i)\n        );\n    }\n\n    @return $accumulator;\n","line":{"start":12,"end":23}},"group":["list"],"parameter":[{"type":"Function","name":"fn","description":"The iterator function. Receives two values, the accumulator and the\ncurrent element from the array."},{"type":"*","name":"acc","description":"The accumulator value."},{"type":"Array","name":"list","description":"The list to iterate over."}],"return":{"type":"*","description":"The final, accumulated value."},"access":"public","require":[],"file":{"path":"_reduce.scss","name":"_reduce.scss"},"usedBy":[{"description":"Multiplies together all the elements of a list.\n\n","context":{"type":"function","name":"product","code":"\n    @return reduce(multiply, 1, $list);\n","line":{"start":10,"end":12}}},{"description":"Adds a list of numbers together.\n\n","context":{"type":"function","name":"sum","code":"\n    @return reduce(add, 0, $list);\n","line":{"start":10,"end":12}}}]},{"description":"The complement of `filter`\n\n","commentRange":{"start":4,"end":10},"context":{"type":"function","name":"reject","code":"\n    @return last(partition($pred, $filterable));\n","line":{"start":12,"end":14}},"group":["list"],"parameter":[{"type":"Function","name":"pred"},{"type":"Array","name":"filterable"}],"return":{"type":"Array"},"see":[{"description":"Takes a predicate and a `filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\n\n","context":{"type":"function","name":"filter","code":"\n    @return head(partition($predicate, $list));\n","line":{"start":14,"end":16}}}],"access":"public","require":[{"type":"function","name":"last"},{"type":"function","name":"partition"}],"file":{"path":"_reject.scss","name":"_reject.scss"}},{"description":"Returns the elements of the given list or string\nfrom `fromIndex` to `toIndex`.\n\n","commentRange":{"start":1,"end":8},"context":{"type":"function","name":"slice","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, $from-index, $to-index);\n    }\n\n    $result: ();\n    @for $i from $from-index through $to-index {\n        $result: append($result, nth($list, $i));\n    }\n    @return $result;\n","line":{"start":10,"end":20}},"group":["list"],"parameter":[{"type":"Number","name":"fromIndex","description":"The start index."},{"type":"Number","name":"toIndex","description":"The end index."},{"type":"*","name":"list"}],"return":{"type":"*"},"access":"public","require":[],"file":{"path":"_slice.scss","name":"_slice.scss"},"usedBy":[{"description":"Returns all but the last element of the given list or string.\n\n","context":{"type":"function","name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","line":{"start":12,"end":15}}},{"description":"Returns all but the first element of the given list or string.\n\n","context":{"type":"function","name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","line":{"start":12,"end":15}}},{"description":"Returns the median average of the given list of numbers.\n\n","context":{"type":"function","name":"median","code":"\n    $length: length($list);\n    $sorted-list: __sort-list-of-numbers($list);\n    $width: 2 - $length % 2;\n    $idx: ($length - $width) / 2;\n    // compensate for list index starting at 1\n    $result: slice($idx + 1, ($idx + $width), $sorted-list);\n\n    @if length($result) == 1 {\n        @return nth($result, 1);\n    } @else {\n        @return mean($result...);\n    }\n","line":{"start":10,"end":23}}}]},{"description":"Returns all but the first element of the given list or string.\n\n","commentRange":{"start":3,"end":10},"context":{"type":"function","name":"tail","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(2, $length, $list);\n","line":{"start":12,"end":15}},"group":["list"],"parameter":[{"type":"*","name":"list"}],"return":{"type":"*"},"see":[{"description":"Returns the first element of the given list or string.\nIn some libraries this function is named `first`.\n\n","context":{"type":"function","name":"head","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, 1, 1);\n    }\n\n    @return nth($list, 1);\n","line":{"start":8,"end":14}}},{"description":"Returns all but the last element of the given list or string.\n\n","context":{"type":"function","name":"init","code":"\n    $length: if(type-of($list) == 'string', str-length($list), length($list));\n    @return slice(1, $length - 1, $list);\n","line":{"start":12,"end":15}}},{"description":"Returns the last element of the given list or string.\n\n","context":{"type":"function","name":"last","code":"\n    @if type-of($list) == 'string' {\n        @return str-slice($list, str-length($list), str-length($list));\n    }\n    @return nth($list, length($list));\n","line":{"start":10,"end":15}}}],"access":"public","require":[{"type":"function","name":"slice"}],"file":{"path":"_tail.scss","name":"_tail.scss"}},{"description":"Returns a new list without values in the first argument.\n`equals` is used to determine equality.\n\n","commentRange":{"start":1,"end":7},"context":{"type":"function","name":"without","code":"\n    $result: [];\n    @each $item in $list2 {\n        @if not index($list1, $item) {\n            $result: append($result, $item, 'comma');\n        }\n    }\n    @return $result;\n","line":{"start":9,"end":17}},"group":["list"],"parameter":[{"type":"Array","name":"list1","description":"The values to be removed from `list2`."},{"type":"Array","name":"list2","description":"The array to remove values from."}],"return":{"type":"Array","description":"The new array without values in `list1`."},"access":"public","require":[],"file":{"path":"_without.scss","name":"_without.scss"}},{"description":"Adds two values.\n\n","commentRange":{"start":1,"end":11},"context":{"type":"function","name":"add","code":"\n    @return $a + $b;\n","line":{"start":13,"end":15}},"group":["math"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Number"},"example":[{"type":"scss","code":"$add-numbers: add(10, 20);\n// $add-numbers -> 30;","description":"add"}],"access":"public","require":[],"file":{"path":"_add.scss","name":"_add.scss"},"usedBy":[{"description":"Increments its argument.\n\n","context":{"type":"function","name":"inc","code":"\n    @return add($n, 1);\n","line":{"start":10,"end":12}}}]},{"description":"Deincrements its argument.\n\n","commentRange":{"start":3,"end":8},"context":{"type":"function","name":"dec","code":"\n    @return subtract($n, 1);\n","line":{"start":10,"end":12}},"group":["math"],"parameter":[{"type":"Number","name":"n"}],"return":{"type":"Number","description":"n - 1"},"see":[{"description":"Increments its argument.\n\n","context":{"type":"function","name":"inc","code":"\n    @return add($n, 1);\n","line":{"start":10,"end":12}}}],"access":"public","require":[{"type":"function","name":"subtract"}],"file":{"path":"_dec.scss","name":"_dec.scss"}},{"description":"Divides two values.\n\n","commentRange":{"start":1,"end":6},"context":{"type":"function","name":"divide","code":"\n    @return $a / $b;\n","line":{"start":8,"end":10}},"group":["math"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Number"},"access":"public","require":[],"file":{"path":"_divide.scss","name":"_divide.scss"}},{"description":"Increments its argument.\n\n","commentRange":{"start":3,"end":8},"context":{"type":"function","name":"inc","code":"\n    @return add($n, 1);\n","line":{"start":10,"end":12}},"group":["math"],"parameter":[{"type":"Number","name":"n"}],"return":{"type":"Number","description":"n + 1"},"see":[{"description":"Deincrements its argument.\n\n","context":{"type":"function","name":"dec","code":"\n    @return subtract($n, 1);\n","line":{"start":10,"end":12}}}],"access":"public","require":[{"type":"function","name":"add"}],"file":{"path":"_inc.scss","name":"_inc.scss"},"usedBy":[{"description":"Returns whether or not a path exists in an object.\n\n","context":{"type":"function","name":"hasPath","code":"\n    @if length($path) == 0 {\n        @return false;\n    }\n    $val: $obj;\n    $idx: 1;\n\n    @while $idx <= length($path) {\n        @if map-has-key($val, nth($path, $idx)) {\n            $val: map-get($val, nth($path, $idx));\n            $idx: inc($idx);\n        } @else {\n            @return false;\n        }\n    }\n\n    @return true;\n","line":{"start":10,"end":27}}},{"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","context":{"type":"function","name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":13,"end":24}}},{"description":"Acts as multiple `prop`: array of keys in, array of values out. Preserves\norder.\n\n","context":{"type":"function","name":"props","code":"\n    $length: length($names);\n    $result: ();\n    $idx: 1;\n\n    @while ($idx <= $length) {\n        $key: nth($names, $idx);\n        @if (map-has-key($obj, $key)) {\n            $result: append($result, map-get($obj, $key), 'comma');\n        } @else {\n            $result: append($result, false, 'comma');\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":11,"end":26}}}]},{"description":"Returns the mean average of the given list of numbers.\n\n","commentRange":{"start":3,"end":7},"context":{"type":"function","name":"mean","code":"\n    @return sum($list) / length($list);\n","line":{"start":9,"end":11}},"group":["math"],"parameter":[{"type":"List","name":"list"}],"return":{"type":"Number"},"access":"public","require":[{"type":"function","name":"sum"}],"file":{"path":"_mean.scss","name":"_mean.scss"},"usedBy":[{"description":"Returns the median average of the given list of numbers.\n\n","context":{"type":"function","name":"median","code":"\n    $length: length($list);\n    $sorted-list: __sort-list-of-numbers($list);\n    $width: 2 - $length % 2;\n    $idx: ($length - $width) / 2;\n    // compensate for list index starting at 1\n    $result: slice($idx + 1, ($idx + $width), $sorted-list);\n\n    @if length($result) == 1 {\n        @return nth($result, 1);\n    } @else {\n        @return mean($result...);\n    }\n","line":{"start":10,"end":23}}}]},{"description":"Returns the median average of the given list of numbers.\n\n","commentRange":{"start":4,"end":8},"context":{"type":"function","name":"median","code":"\n    $length: length($list);\n    $sorted-list: __sort-list-of-numbers($list);\n    $width: 2 - $length % 2;\n    $idx: ($length - $width) / 2;\n    // compensate for list index starting at 1\n    $result: slice($idx + 1, ($idx + $width), $sorted-list);\n\n    @if length($result) == 1 {\n        @return nth($result, 1);\n    } @else {\n        @return mean($result...);\n    }\n","line":{"start":10,"end":23}},"group":["math"],"parameter":[{"type":"List","name":"list"}],"return":{"type":"Number"},"access":"public","require":[{"type":"function","name":"slice"},{"type":"function","name":"mean"}],"file":{"path":"_median.scss","name":"_median.scss"}},{"description":"Multiplies two values.\n\n","commentRange":{"start":1,"end":6},"context":{"type":"function","name":"multiply","code":"\n    @return $a * $b;\n","line":{"start":8,"end":10}},"group":["math"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Number"},"access":"public","require":[],"file":{"path":"_multiply.scss","name":"_multiply.scss"}},{"description":"Negates its argument.\n\n","commentRange":{"start":1,"end":5},"context":{"type":"function","name":"negate","code":"\n    @return -$n;\n","line":{"start":7,"end":9}},"group":["math"],"parameter":[{"type":"Number","name":"n"}],"return":{"type":"Number"},"access":"public","require":[],"file":{"path":"_negate.scss","name":"_negate.scss"}},{"description":"Multiplies together all the elements of a list.\n\n","commentRange":{"start":4,"end":8},"context":{"type":"function","name":"product","code":"\n    @return reduce(multiply, 1, $list);\n","line":{"start":10,"end":12}},"group":["math"],"parameter":[{"type":"Array","name":"list","description":"An array of numbers"}],"return":{"type":"Number","description":"The product of all the numbers in the list."},"access":"public","require":[{"type":"function","name":"reduce"}],"file":{"path":"_product.scss","name":"_product.scss"}},{"description":"Subtract two values.\n\n","commentRange":{"start":1,"end":6},"context":{"type":"function","name":"subtract","code":"\n    @return $a - $b;\n","line":{"start":8,"end":10}},"group":["math"],"parameter":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}],"return":{"type":"Number"},"access":"public","require":[],"file":{"path":"_subtract.scss","name":"_subtract.scss"},"usedBy":[{"description":"Deincrements its argument.\n\n","context":{"type":"function","name":"dec","code":"\n    @return subtract($n, 1);\n","line":{"start":10,"end":12}}}]},{"description":"Adds a list of numbers together.\n\n","commentRange":{"start":4,"end":8},"context":{"type":"function","name":"sum","code":"\n    @return reduce(add, 0, $list);\n","line":{"start":10,"end":12}},"group":["math"],"parameter":[{"type":"List","name":"list"}],"return":{"type":"Number"},"access":"public","require":[{"type":"function","name":"reduce"}],"file":{"path":"_sum.scss","name":"_sum.scss"},"usedBy":[{"description":"Returns the mean average of the given list of numbers.\n\n","context":{"type":"function","name":"mean","code":"\n    @return sum($list) / length($list);\n","line":{"start":9,"end":11}}}]},{"description":"Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value.\n\n","commentRange":{"start":1,"end":23},"context":{"type":"function","name":"assoc","code":"\n    @return map-merge($obj, (#{$prop}: $val));\n","line":{"start":25,"end":27}},"group":["object"],"parameter":[{"type":"String","name":"prop","description":"The property name to set"},{"type":"*","name":"val","description":"The new value"},{"type":"Object","name":"obj","description":"The object to clone"}],"return":{"type":"Object","description":"A new object equivalent to the original except for the changed property."},"see":[{"description":"Returns a new object that does not contain a `prop` property.\n\n","context":{"type":"function","name":"dissoc","code":"\n    @return omit(($prop), $obj);\n","line":{"start":12,"end":14}}},{"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","context":{"type":"function","name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":13,"end":24}}}],"example":[{"type":"scss","code":"$obj: (\n    a: 1,\n    b: 2\n);\n$set-prop: assoc('c', 3, $obj),\n// $set-prop -> (\n//     a: 1,\n//     b: 2,\n//     c: 3\n// );","description":"assoc"}],"access":"public","require":[],"file":{"path":"_assoc.scss","name":"_assoc.scss"}},{"description":"Returns a new object that does not contain a `prop` property.\n\n","commentRange":{"start":3,"end":10},"context":{"type":"function","name":"dissoc","code":"\n    @return omit(($prop), $obj);\n","line":{"start":12,"end":14}},"group":["object"],"parameter":[{"type":"String","name":"prop","description":"The name of the property to dissociate"},{"type":"Object","name":"obj","description":"The object to clone"}],"return":{"type":"Object","description":"A new object equivalent to the original but without the specified property"},"see":[{"description":"Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value.\n\n","context":{"type":"function","name":"assoc","code":"\n    @return map-merge($obj, (#{$prop}: $val));\n","line":{"start":25,"end":27}}},{"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","context":{"type":"function","name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":13,"end":24}}}],"access":"public","require":[{"type":"function","name":"omit"}],"file":{"path":"_dissoc.scss","name":"_dissoc.scss"}},{"description":"Returns whether or not an object has a property with the specified name\n\n","commentRange":{"start":3,"end":8},"context":{"type":"function","name":"has","code":"\n    $_prop: quote($prop);\n    @return hasPath($_prop, $obj);\n","line":{"start":10,"end":13}},"group":["object"],"parameter":[{"type":"String","name":"prop","description":"The name of the property to check for."},{"type":"Object","name":"obj","description":"The object to query."}],"return":{"type":"Boolean","description":"Whether the property exists."},"access":"public","require":[{"type":"function","name":"hasPath"}],"file":{"path":"_has.scss","name":"_has.scss"}},{"description":"Returns whether or not a path exists in an object.\n\n","commentRange":{"start":3,"end":8},"context":{"type":"function","name":"hasPath","code":"\n    @if length($path) == 0 {\n        @return false;\n    }\n    $val: $obj;\n    $idx: 1;\n\n    @while $idx <= length($path) {\n        @if map-has-key($val, nth($path, $idx)) {\n            $val: map-get($val, nth($path, $idx));\n            $idx: inc($idx);\n        } @else {\n            @return false;\n        }\n    }\n\n    @return true;\n","line":{"start":10,"end":27}},"group":["object"],"parameter":[{"type":"Array","name":"path","description":"The path to use."},{"type":"Object","name":"obj","description":"The object to check the path in."}],"return":{"type":"Boolean","description":"Whether the path exists."},"access":"public","require":[{"type":"function","name":"inc"}],"file":{"path":"_hasPath.scss","name":"_hasPath.scss"},"usedBy":[{"description":"Returns whether or not an object has a property with the specified name\n\n","context":{"type":"function","name":"has","code":"\n    $_prop: quote($prop);\n    @return hasPath($_prop, $obj);\n","line":{"start":10,"end":13}}}]},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the first object will be used.\n\n","commentRange":{"start":3,"end":16},"context":{"type":"function","name":"merge-deep-left","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-left-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}},"group":["object"],"parameter":[{"type":"Object","name":"l-obj","description":"left object"},{"type":"Object","name":"r-obj","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":15,"end":17}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}}],"access":"public","require":[{"type":"function","name":"merge-deep-with-key"}],"file":{"path":"_merge-deep-left.scss","name":"_merge-deep-left.scss"}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","commentRange":{"start":3,"end":16},"context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}},"group":["object"],"parameter":[{"type":"Object","name":"l-obj","description":"left object"},{"type":"Object","name":"r-obj","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":15,"end":17}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the first object will be used.\n\n","context":{"type":"function","name":"merge-deep-left","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-left-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}}],"access":"public","require":[{"type":"function","name":"merge-deep-with-key"}],"file":{"path":"_merge-deep-right.scss","name":"_merge-deep-right.scss"}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","commentRange":{"start":6,"end":22},"context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}},"group":["object"],"parameter":[{"type":"Function","name":"fn","description":"function to call when two keys match"},{"type":"Object","name":"l-obj","description":"left object"},{"type":"Object","name":"r-obj","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":16,"end":43}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}}],"access":"public","require":[{"type":"function","name":"merge-with-key"}],"file":{"path":"_merge-deep-with-key.scss","name":"_merge-deep-with-key.scss"},"usedBy":[{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the first object will be used.\n\n","context":{"type":"function","name":"merge-deep-left","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-left-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}}]},{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","commentRange":{"start":6,"end":22},"context":{"type":"function","name":"merge-deep-with","code":"\n    $_sass-fire-merge-deep-with-fn: $fn !global;\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-with-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}},"group":["object"],"parameter":[{"type":"Function","name":"fn","description":"function to call when two keys match"},{"type":"Object","name":"l-obj","description":"left object"},{"type":"Object","name":"r-obj","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":21,"end":24}}}],"access":"public","require":[{"type":"function","name":"merge-deep-with-key"}],"file":{"path":"_merge-deep-with.scss","name":"_merge-deep-with.scss"}},{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the first object will be used.\n\n","commentRange":{"start":3,"end":15},"context":{"type":"function","name":"merge-left","code":"\n    @return merge($r, $l);\n","line":{"start":17,"end":19}},"group":["object"],"parameter":[{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge-right","code":"\n    @return merge($l, $r);\n","line":{"start":17,"end":19}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":21,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":16,"end":43}}}],"access":"public","require":[{"type":"function","name":"merge"}],"file":{"path":"_merge-left.scss","name":"_merge-left.scss"}},{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","commentRange":{"start":3,"end":15},"context":{"type":"function","name":"merge-right","code":"\n    @return merge($l, $r);\n","line":{"start":17,"end":19}},"group":["object"],"parameter":[{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the first object will be used.\n\n","context":{"type":"function","name":"merge-left","code":"\n    @return merge($r, $l);\n","line":{"start":17,"end":19}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":21,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":16,"end":43}}}],"access":"public","require":[{"type":"function","name":"merge"}],"file":{"path":"_merge-right.scss","name":"_merge-right.scss"}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","commentRange":{"start":1,"end":14},"context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":16,"end":43}},"group":["object"],"parameter":[{"type":"Function","name":"fn","description":"function to call when two keys match"},{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":15,"end":17}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":21,"end":24}}}],"access":"public","require":[],"file":{"path":"_merge-with-key.scss","name":"_merge-with-key.scss"},"usedBy":[{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":21,"end":24}}}]},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","commentRange":{"start":6,"end":19},"context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":21,"end":24}},"group":["object"],"parameter":[{"type":"Function","name":"fn","description":"function to call when two keys match"},{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.\n\n","context":{"type":"function","name":"merge-deep-with-key","code":"\n    $_sass-fire-merge-deep-with-key-fn: $fn !global;\n    @return merge-with-key(\n        _sass-fire-merge-deep-with-key-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":24,"end":31}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":15,"end":17}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":16,"end":43}}}],"access":"public","require":[{"type":"function","name":"merge-with-key"}],"file":{"path":"_merge-with.scss","name":"_merge-with.scss"}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","commentRange":{"start":1,"end":13},"context":{"type":"function","name":"merge","code":"\n    @return map-merge($l, $r);\n","line":{"start":15,"end":17}},"group":["object"],"parameter":[{"type":"Object","name":"l","description":"left object"},{"type":"Object","name":"r","description":"right object"}],"return":{"type":"Object","description":"merged object\n"},"see":[{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge-right","code":"\n    @return merge($l, $r);\n","line":{"start":17,"end":19}}},{"description":"Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.\n\n","context":{"type":"function","name":"merge-deep-right","code":"\n    @return merge-deep-with-key(\n        _sass-fire-merge-deep-right-caller,\n        $l-obj,\n        $r-obj\n    );\n","line":{"start":18,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with","code":"\n    $_sass-fire-merge-with-key-fn: $fn !global;\n    @return merge-with-key(_sass-fire-merge-with-caller, $l, $r);\n","line":{"start":21,"end":24}}},{"description":"Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.\n\n","context":{"type":"function","name":"merge-with-key","code":"\n    $result: ();\n    $k: ();\n    @each $key, $value in $l {\n        @if map-has-key($r, $key) {\n            $k: (\n                #{$key}:\n                    call(\n                        get-function($fn),\n                        $key,\n                        map-get($l, $key),\n                        map-get($r, $key)\n                    )\n            );\n        } @else {\n            $k: (#{$key}: map-get($l, $key));\n        }\n        $result: map-merge($result, $k);\n    }\n\n    @each $key, $value in $r {\n        @if not map-has-key($result, $key) {\n            $result: map-merge($result, (#{$key}: $value));\n        }\n    }\n\n    @return $result;\n","line":{"start":16,"end":43}}}],"access":"public","require":[],"file":{"path":"_merge.scss","name":"_merge.scss"},"usedBy":[{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the first object will be used.\n\n","context":{"type":"function","name":"merge-left","code":"\n    @return merge($r, $l);\n","line":{"start":17,"end":19}}},{"description":"Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n","context":{"type":"function","name":"merge-right","code":"\n    @return merge($l, $r);\n","line":{"start":17,"end":19}}}]},{"description":"Returns a partial copy of an object omitting the specified keys\n\n","commentRange":{"start":1,"end":11},"context":{"type":"function","name":"omit","code":"\n    $result: ();\n    $index: ();\n    $idx: 1;\n    $length: length($keys);\n\n    @while $idx <= $length {\n        $index: map-merge($index, (#{nth($keys, $idx)}: 1));\n        $idx: $idx + 1;\n    }\n\n    @each $prop, $val in $map {\n        @if not map-has-key($index, $prop) {\n            $result: map-merge($result, (#{$prop}: $val));\n        }\n    }\n\n    @return $result;\n","line":{"start":13,"end":31}},"group":["object"],"parameter":[{"type":"List","name":"keys","description":"keys to remove from the map"},{"type":"Map","name":"map","description":"the map to copy from"}],"return":{"type":"Map","description":"A new map without the properties from $keys.\n"},"example":[{"type":"scss","code":"$map-omit: omit((tom, harry), (tom: 1, dick: 2, harry: 3);\n// $map-omit -> (dick: 2);","description":"omit"}],"access":"public","require":[],"file":{"path":"_omit.scss","name":"_omit.scss"},"usedBy":[{"description":"Returns a new object that does not contain a `prop` property.\n\n","context":{"type":"function","name":"dissoc","code":"\n    @return omit(($prop), $obj);\n","line":{"start":12,"end":14}}}]},{"description":"Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n","commentRange":{"start":3,"end":11},"context":{"type":"function","name":"pick","code":"\n    $result: ();\n    $idx: 1;\n    @while ($idx <= length($names)) {\n        @if map-has-key($obj, nth($names, $idx)) {\n            $key: nth($names, $idx);\n            $result: map-merge($result, (#{$key}: map-get($obj, $key)));\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":13,"end":24}},"group":["object"],"parameter":[{"type":"Array","name":"names","description":"an array of String property names to copy onto a new object"},{"type":"Object","name":"obj","description":"The object to copy from"}],"return":{"type":"Object","description":"A new object with only properties from `names` on it."},"see":[{"description":"Returns a partial copy of an object omitting the specified keys\n\n","context":{"type":"function","name":"omit","code":"\n    $result: ();\n    $index: ();\n    $idx: 1;\n    $length: length($keys);\n\n    @while $idx <= $length {\n        $index: map-merge($index, (#{nth($keys, $idx)}: 1));\n        $idx: $idx + 1;\n    }\n\n    @each $prop, $val in $map {\n        @if not map-has-key($index, $prop) {\n            $result: map-merge($result, (#{$prop}: $val));\n        }\n    }\n\n    @return $result;\n","line":{"start":13,"end":31}}},{"description":"Acts as multiple `prop`: array of keys in, array of values out. Preserves\norder.\n\n","context":{"type":"function","name":"props","code":"\n    $length: length($names);\n    $result: ();\n    $idx: 1;\n\n    @while ($idx <= $length) {\n        $key: nth($names, $idx);\n        @if (map-has-key($obj, $key)) {\n            $result: append($result, map-get($obj, $key), 'comma');\n        } @else {\n            $result: append($result, false, 'comma');\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":11,"end":26}}}],"access":"public","require":[{"type":"function","name":"inc"}],"file":{"path":"_pick.scss","name":"_pick.scss"}},{"description":"Acts as multiple `prop`: array of keys in, array of values out. Preserves\norder.\n\n","commentRange":{"start":3,"end":9},"context":{"type":"function","name":"props","code":"\n    $length: length($names);\n    $result: ();\n    $idx: 1;\n\n    @while ($idx <= $length) {\n        $key: nth($names, $idx);\n        @if (map-has-key($obj, $key)) {\n            $result: append($result, map-get($obj, $key), 'comma');\n        } @else {\n            $result: append($result, false, 'comma');\n        }\n        $idx: inc($idx);\n    }\n    @return $result;\n","line":{"start":11,"end":26}},"group":["object"],"parameter":[{"type":"Array","name":"names","description":"The property names to fetch"},{"type":"Object","name":"obj","description":"The object to query"}],"return":{"type":"Array","description":"The corresponding values or partially applied function."},"access":"public","require":[{"type":"function","name":"inc"}],"file":{"path":"_props.scss","name":"_props.scss"}},{"description":"Splits a string into an array of strings based on the given\nseparator.\n\n","commentRange":{"start":1,"end":7},"context":{"type":"function","name":"split","code":"\n    $delimiter-length: str-length($sep);\n    $idx: str-index($str, $sep);\n    $result: ();\n    @while $idx != null {\n        $result: append($result, str-slice($str, 1, $idx - 1), 'comma');\n        $str: str-slice($str, $idx + $delimiter-length);\n        $idx: str-index($str, $sep);\n    }\n    @return append($result, $str);\n","line":{"start":9,"end":19}},"group":["string"],"parameter":[{"type":"String","name":"sep","description":"The pattern."},{"type":"String","name":"str","description":"The string to separate into an array."}],"return":{"type":"Array","description":"The array of strings from `str` separated by `str`."},"access":"public","require":[],"file":{"path":"_split.scss","name":"_split.scss"},"usedBy":[{"description":"Removes (strips) whitespace from both ends of the string.\n\n","context":{"type":"function","name":"trim","code":"\n    $result: split(' ', $str);\n    @return implode($xs: $result);\n","line":{"start":9,"end":12}}}]},{"description":"Removes (strips) whitespace from both ends of the string.\n\n","commentRange":{"start":3,"end":7},"context":{"type":"function","name":"trim","code":"\n    $result: split(' ', $str);\n    @return implode($xs: $result);\n","line":{"start":9,"end":12}},"group":["string"],"parameter":[{"type":"String","name":"str","description":"The string to trim."}],"return":{"type":"String","description":"Trimmed version of `str`."},"access":"public","require":[{"type":"function","name":"split"},{"type":"function","name":"implode"}],"file":{"path":"_trim.scss","name":"_trim.scss"}}]